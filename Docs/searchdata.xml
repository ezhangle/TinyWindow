<?xml version="1.0" encoding="UTF-8"?>
<add>
  <doc>
    <field name="type">file</field>
    <field name="name">TinyWindow.h</field>
    <field name="url">d7/d9c/TinyWindow_8h.html</field>
    <field name="keywords">TinyWindow.h</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">DEFAULT_WINDOW_WIDTH</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a6ca4df6b9e1495a80a2929a5187cb9b9</field>
    <field name="keywords">DEFAULT_WINDOW_WIDTH</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">DEFAULT_WINDOW_HEIGHT</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a030ebc610fddb0a18d62829ab376bf85</field>
    <field name="keywords">DEFAULT_WINDOW_HEIGHT</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEYSTATE_DOWN</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#aa6a3469732429c1156ae8a25d36798f8</field>
    <field name="keywords">KEYSTATE_DOWN</field>
    <field name="text">the key is currently up</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEYSTATE_UP</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a7b9ecb6e7f74ac9c9aff07b222239137</field>
    <field name="keywords">KEYSTATE_UP</field>
    <field name="text">the key is currently down</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_ERROR</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ab336b9c20ef5ab377a509ed2a868fc06</field>
    <field name="keywords">KEY_ERROR</field>
    <field name="text">the key pressed is considered invalid</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_FIRST</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a67c31b205ff07ce9500612b30af312a9</field>
    <field name="keywords">KEY_FIRST</field>
    <field name="text">the fist key that is not a char</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_F1</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a2772a1f7024ba1fd62e88ec1adb541f8</field>
    <field name="keywords">KEY_F1</field>
    <field name="text">the F1 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_F2</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ae2e2edb31bb7796786da12f85f2d5cd1</field>
    <field name="keywords">KEY_F2</field>
    <field name="text">the F2 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_F3</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a38ebe8e5c5f1d5727c9638bf79fc3952</field>
    <field name="keywords">KEY_F3</field>
    <field name="text">the F3 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_F4</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ab99474b01ffcbc57d74b60a77895e5e8</field>
    <field name="keywords">KEY_F4</field>
    <field name="text">the F4 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_F5</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a2a0aae1931111382ade29fd75ef64790</field>
    <field name="keywords">KEY_F5</field>
    <field name="text">the F5 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_F6</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ad31281b771b8b85f4aa98bbd527d91a0</field>
    <field name="keywords">KEY_F6</field>
    <field name="text">the F6 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_F7</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a7eed6766ef9ddb721c6a2bce807fc9dc</field>
    <field name="keywords">KEY_F7</field>
    <field name="text">the F7 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_F8</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a7a8ad03f07f2e4757a70385e88fbbe3c</field>
    <field name="keywords">KEY_F8</field>
    <field name="text">the F8 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_F9</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a417a382624f91fb0cdfdf1c33adc8c90</field>
    <field name="keywords">KEY_F9</field>
    <field name="text">the F9 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_F10</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ad37282615edb2c357149c2a1342b4a85</field>
    <field name="keywords">KEY_F10</field>
    <field name="text">the F10 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_F11</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#abd820bb8b4b2a47e4210401b13789106</field>
    <field name="keywords">KEY_F11</field>
    <field name="text">the F11 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_F12</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a0a3de83275f6bbc2b88692f947f0d595</field>
    <field name="keywords">KEY_F12</field>
    <field name="text">the F12 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_CAPSLOCK</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#af168e54444bdaff5f50f6f4734784762</field>
    <field name="keywords">KEY_CAPSLOCK</field>
    <field name="text">the CapsLock key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_LEFTSHIFT</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a13a0f4f476ef33ca0ef8f62c3ed3823b</field>
    <field name="keywords">KEY_LEFTSHIFT</field>
    <field name="text">the left Shift key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_RIGHTSHIFT</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a2f554668b12882e07f3b09affc1136d8</field>
    <field name="keywords">KEY_RIGHTSHIFT</field>
    <field name="text">the right Shift key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_LEFTCONTROL</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a0ab4b151aa2bfa5c9e3fc951ae51ef1e</field>
    <field name="keywords">KEY_LEFTCONTROL</field>
    <field name="text">the left Control key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_RIGHTCONTROL</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ab9a2a632b8d831855036ce660ba6c104</field>
    <field name="keywords">KEY_RIGHTCONTROL</field>
    <field name="text">the right Control key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_LEFTWINDOW</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a311a5423c41f57a6a595ab30b74ae815</field>
    <field name="keywords">KEY_LEFTWINDOW</field>
    <field name="text">the left Window key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_RIGHTWINDOW</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ad298219c83a5b7433da8a4525072f0dd</field>
    <field name="keywords">KEY_RIGHTWINDOW</field>
    <field name="text">the right Window key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_LEFTALT</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ad092ab621dd17fd8e1e639603fd49c96</field>
    <field name="keywords">KEY_LEFTALT</field>
    <field name="text">the left Alternate key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_RIGHTALT</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a77f9fb79004137171ac75f0bfb245e5d</field>
    <field name="keywords">KEY_RIGHTALT</field>
    <field name="text">the right Alternate key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_ENTER</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#abaee5edb96e542206ae6c8102ac228af</field>
    <field name="keywords">KEY_ENTER</field>
    <field name="text">the Enter/Return key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_PRINTSCREEN</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a55a40c32cb4d04e47924daf6530520ff</field>
    <field name="keywords">KEY_PRINTSCREEN</field>
    <field name="text">the PrintScreen key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_SCROLLLOCK</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a864123ec9700eac6b326d85523af90d9</field>
    <field name="keywords">KEY_SCROLLLOCK</field>
    <field name="text">the ScrollLock key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_NUMLOCK</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#aa9a01a8ed5fb358424866f4bc61d7c13</field>
    <field name="keywords">KEY_NUMLOCK</field>
    <field name="text">the NumLock key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_PAUSE</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ae176aa9af3d2acaeba5b8453aff5bbbf</field>
    <field name="keywords">KEY_PAUSE</field>
    <field name="text">the pause/break key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_INSERT</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#aaa67a531439790dc20ed750f482d4a3e</field>
    <field name="keywords">KEY_INSERT</field>
    <field name="text">the insert key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_HOME</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#af6806366178266b3eaf1fb16f991cbee</field>
    <field name="keywords">KEY_HOME</field>
    <field name="text">the Home key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_END</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a912861b945e779c29f718cdcd62be10c</field>
    <field name="keywords">KEY_END</field>
    <field name="text">the End key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_PAGEUP</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ad9a7ec454712e27b31fc4487990ff485</field>
    <field name="keywords">KEY_PAGEUP</field>
    <field name="text">the PageUp key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_PAGEDOWN</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a0e8036dd16e0d2a672f952a61a8674f6</field>
    <field name="keywords">KEY_PAGEDOWN</field>
    <field name="text">the PageDown key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_ARROW_DOWN</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a60f23094767ecbd67db2ffcfbdeab63e</field>
    <field name="keywords">KEY_ARROW_DOWN</field>
    <field name="text">the ArrowDown key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_ARROW_UP</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ae98544c747155495a331a71a8e4599f7</field>
    <field name="keywords">KEY_ARROW_UP</field>
    <field name="text">the ArrowUp key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_ARROW_LEFT</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a3f58255e7e1a6a1b2516a6f663e5cbc5</field>
    <field name="keywords">KEY_ARROW_LEFT</field>
    <field name="text">the ArrowLeft key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_ARROW_RIGHT</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#afd0edf54b49efd2a6a186b31f55d7d60</field>
    <field name="keywords">KEY_ARROW_RIGHT</field>
    <field name="text">the ArrowRight key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_KEYPAD_DIVIDE</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a3d9a201d28234b6629792920987013b4</field>
    <field name="keywords">KEY_KEYPAD_DIVIDE</field>
    <field name="text">the KeyPad Divide key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_KEYPAD_MULTIPLY</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ac4e3ebf6ef556388bf723d4bac0a1b62</field>
    <field name="keywords">KEY_KEYPAD_MULTIPLY</field>
    <field name="text">the Keypad Multiply key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_KEYPAD_SUBTRACT</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a7204855bcd9ecd47d31414f5a4c3ba36</field>
    <field name="keywords">KEY_KEYPAD_SUBTRACT</field>
    <field name="text">the Keypad Subtract key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_KEYPAD_ADD</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a4345a252ed6b1430269fa28090b31ac6</field>
    <field name="keywords">KEY_KEYPAD_ADD</field>
    <field name="text">the Keypad Add key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_KEYPAD_ENTER</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a4bfce4b0f77f98b27288666309aef3a5</field>
    <field name="keywords">KEY_KEYPAD_ENTER</field>
    <field name="text">the Keypad Enter key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_KEYPAD_PERIOD</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a6a6b65bc3aecf4bfbb192caddfa84afe</field>
    <field name="keywords">KEY_KEYPAD_PERIOD</field>
    <field name="text">the Keypad Period/Decimal key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_KEYPAD_0</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ac50439015ec3a82899f0a57d95e7db29</field>
    <field name="keywords">KEY_KEYPAD_0</field>
    <field name="text">the Keypad 0 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_KEYPAD_1</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#aafd1e4599cfb526e956f8ac0727300c2</field>
    <field name="keywords">KEY_KEYPAD_1</field>
    <field name="text">the Keypad 1 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_KEYPAD_2</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ae3718b37e5b1f898a76c2776eb617f1c</field>
    <field name="keywords">KEY_KEYPAD_2</field>
    <field name="text">the Keypad 2 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_KEYPAD_3</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#abbfd9f6742f6b602ba54f7ad71acbbce</field>
    <field name="keywords">KEY_KEYPAD_3</field>
    <field name="text">the Keypad 3 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_KEYPAD_4</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#aa04fcca7ec770a0a4eaad6fbf2c0ecb1</field>
    <field name="keywords">KEY_KEYPAD_4</field>
    <field name="text">the Keypad 4 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_KEYPAD_5</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a984f5ab6af053692cd5b0325f54fc5e9</field>
    <field name="keywords">KEY_KEYPAD_5</field>
    <field name="text">the Keypad 5 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_KEYPAD_6</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ac361167a84674b3f99c20078f6a32769</field>
    <field name="keywords">KEY_KEYPAD_6</field>
    <field name="text">the Keypad 6 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_KEYPAD_7</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ad80e99c7c6b4b5123ab9de6f2f6f61ac</field>
    <field name="keywords">KEY_KEYPAD_7</field>
    <field name="text">the Keypad 7 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_KEYPAD_8</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ac47e4f484995b1a49debe7ca0a059d53</field>
    <field name="keywords">KEY_KEYPAD_8</field>
    <field name="text">the keypad 8 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_KEYPAD_9</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a042291ad7332dd59e9907470e71ed8af</field>
    <field name="keywords">KEY_KEYPAD_9</field>
    <field name="text">the Keypad 9 key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_BACKSPACE</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a1e9a449dee19c686a2af4edcdc1a1042</field>
    <field name="keywords">KEY_BACKSPACE</field>
    <field name="text">the Backspace key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_TAB</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a4fa9fbcc86d5ee884a821459a87f3a54</field>
    <field name="keywords">KEY_TAB</field>
    <field name="text">the Tab key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_DELETE</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a1d654db2e04ad94a58f880fb9e127ad6</field>
    <field name="keywords">KEY_DELETE</field>
    <field name="text">the Delete key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_ESCAPE</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a6c8ee53908fc5d6df19f1da8502b38dc</field>
    <field name="keywords">KEY_ESCAPE</field>
    <field name="text">the Escape key</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KEY_LAST</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#aea07fbab8862471fcd5cdb8d713b5c7c</field>
    <field name="keywords">KEY_LAST</field>
    <field name="text">the last key to be supported</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MOUSE_BUTTONUP</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a5fbf44c9df10f3701313f0c3b3f7a8ce</field>
    <field name="keywords">MOUSE_BUTTONUP</field>
    <field name="text">the mouse button is currently up</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MOUSE_BUTTONDOWN</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#aeafe124991594af94ac72e269c76aba5</field>
    <field name="keywords">MOUSE_BUTTONDOWN</field>
    <field name="text">the mouse button is currently down</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MOUSE_LEFTBUTTON</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a58bf510774ef758877506faa0a9eb5b5</field>
    <field name="keywords">MOUSE_LEFTBUTTON</field>
    <field name="text">the left mouse button</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MOUSE_RIGHTBUTTON</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ab0d0ecc18d38842062642eed72a0c180</field>
    <field name="keywords">MOUSE_RIGHTBUTTON</field>
    <field name="text">the right mouse button</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MOUSE_MIDDLEBUTTON</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ae145d7f240cae77a53c66dc1802ec561</field>
    <field name="keywords">MOUSE_MIDDLEBUTTON</field>
    <field name="text">the middle mouse button ScrollWheel</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MOUSE_LAST</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#aeba06eaa93521c5bef007da8c3b87f19</field>
    <field name="keywords">MOUSE_LAST</field>
    <field name="text">the last mouse button to be supported</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MOUSE_SCROLL_DOWN</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#afbc7f91763d774a07a383e56c77e7973</field>
    <field name="keywords">MOUSE_SCROLL_DOWN</field>
    <field name="text">the mouse wheel up</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MOUSE_SCROLL_UP</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ad128a0a077f32a71ce235756cb8fc97f</field>
    <field name="keywords">MOUSE_SCROLL_UP</field>
    <field name="text">the mouse wheel down</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">WINDOWSTYLE_BARE</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a7b8ef645bccf05ee050c74ab409cd9ee</field>
    <field name="keywords">WINDOWSTYLE_BARE</field>
    <field name="text">the window has no decorators but the window border and title bar</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">WINDOWSTYLE_DEFAULT</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a9f5b2c8d4f39683a541b6544f89e0663</field>
    <field name="keywords">WINDOWSTYLE_DEFAULT</field>
    <field name="text">the default window style for the respective platform</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">WINDOWSTYLE_POPUP</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a6d2568690bc653e7c53a94a8c746d1f0</field>
    <field name="keywords">WINDOWSTYLE_POPUP</field>
    <field name="text">the window has no decorators</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">WINDOWSTATE_NORMAL</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ae6d56bffa67e2a7dc0a1ff9a8b52220e</field>
    <field name="keywords">WINDOWSTATE_NORMAL</field>
    <field name="text">the window is in its default state</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">WINDOWSTATE_MAXIMIZED</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a265d35ddbd5b510f8ac8009dfd40fa8e</field>
    <field name="keywords">WINDOWSTATE_MAXIMIZED</field>
    <field name="text">the window is currently maximized</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">WINDOWSTATE_MINIMIZED</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a75d3fc3f255f29a8611173e329c79204</field>
    <field name="keywords">WINDOWSTATE_MINIMIZED</field>
    <field name="text">the window is currently minimized</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">WINDOWSTATE_FULLSCREEN</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a57ffe736bbb442c40e50196e39e7955c</field>
    <field name="keywords">WINDOWSTATE_FULLSCREEN</field>
    <field name="text">the window is currently full screen</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">DECORATOR_TITLEBAR</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a7c6498f7ffbc441602b8fa774041d84b</field>
    <field name="keywords">DECORATOR_TITLEBAR</field>
    <field name="text">The title bar decoration of the window</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">DECORATOR_ICON</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#aeb7ed135acebb0122578323a11aedf52</field>
    <field name="keywords">DECORATOR_ICON</field>
    <field name="text">the icon decoration of the window</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">DECORATOR_BORDER</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ac2dbdc618f11575abbccb4b447361266</field>
    <field name="keywords">DECORATOR_BORDER</field>
    <field name="text">the border decoration of the window</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">DECORATOR_MINIMIZEBUTTON</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a1d941b2069c4f46bbc963fbe33eabc26</field>
    <field name="keywords">DECORATOR_MINIMIZEBUTTON</field>
    <field name="text">the minimize button decoration of the window</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">DECORATOR_MAXIMIZEBUTTON</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ad84c7fcaf0f5714cde07ff82c13f743f</field>
    <field name="keywords">DECORATOR_MAXIMIZEBUTTON</field>
    <field name="text">the maximize button decoration pf the window</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">DECORATOR_CLOSEBUTTON</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a475e1034379bf2bfa1f91c7a6a42af94</field>
    <field name="keywords">DECORATOR_CLOSEBUTTON</field>
    <field name="text">the close button decoration of the window</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">DECORATOR_SIZEABLEBORDER</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a527fd989d9b1d617e0e7440f38ae79c8</field>
    <field name="keywords">DECORATOR_SIZEABLEBORDER</field>
    <field name="text">the sizable border decoration of the window</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">LINUX_DECORATOR_BORDER</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ae2458451d91a4cd28b6af420d5ef2e2c</field>
    <field name="keywords">LINUX_DECORATOR_BORDER</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">LINUX_DECORATOR_MOVE</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#aa75fd83baf78923772ecac2bac9889f6</field>
    <field name="keywords">LINUX_DECORATOR_MOVE</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">LINUX_DECORATOR_MINIMIZE</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a304548a193cdf95c60c5a361a686d490</field>
    <field name="keywords">LINUX_DECORATOR_MINIMIZE</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">LINUX_DECORATOR_MAXIMIZE</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a5fdab83c60d39112c2c6e2f39933d020</field>
    <field name="keywords">LINUX_DECORATOR_MAXIMIZE</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">LINUX_DECORATOR_CLOSE</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a97636b1d1a64fec68b2a70ca54e069c4</field>
    <field name="keywords">LINUX_DECORATOR_CLOSE</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">FOUNDATION_ERROR</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a7bb7c09bd6bb18303b6da9a296f66234</field>
    <field name="keywords">FOUNDATION_ERROR</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">FOUNDATION_OK</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#acafbcdb4ce487883ca6e280fbe5c4e45</field>
    <field name="keywords">FOUNDATION_OK</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_NO_CONTEXT</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a4bd0b37fb55a2d4af4a6dcafda0cc167</field>
    <field name="keywords">TINYWINDOW_ERROR_NO_CONTEXT</field>
    <field name="text">if a window tries to use a graphical function without a context</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_INVALID_WINDOW_NAME</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#adfa3a068eb0077edd1d498ce004e385e</field>
    <field name="keywords">TINYWINDOW_ERROR_INVALID_WINDOW_NAME</field>
    <field name="text">if an invalid window name was given</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_INVALID_WINDOW_INDEX</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a2699a95b645a4c04c4d2e1a17627bd5e</field>
    <field name="keywords">TINYWINDOW_ERROR_INVALID_WINDOW_INDEX</field>
    <field name="text">if an invalid window index was given</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_INVALID_WINDOW_STATE</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a6aff795508dbdce9d80b07403f9108f6</field>
    <field name="keywords">TINYWINDOW_ERROR_INVALID_WINDOW_STATE</field>
    <field name="text">if an invalid window state was given</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_INVALID_RESOLUTION</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a3a04190467a7cf5391a29e91fa6db34c</field>
    <field name="keywords">TINYWINDOW_ERROR_INVALID_RESOLUTION</field>
    <field name="text">if an invalid window resolution was given</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_INVALID_CONTEXT</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a8e68a91ad4fa8e13cd74b464d4552a55</field>
    <field name="keywords">TINYWINDOW_ERROR_INVALID_CONTEXT</field>
    <field name="text">if the OpenGL context for the window is invalid</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_EXISTING_CONTEXT</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#aace2a77eaf14a2ee2c86e1a8ece873a9</field>
    <field name="keywords">TINYWINDOW_ERROR_EXISTING_CONTEXT</field>
    <field name="text">if the window already has an OpenGL context</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_NOT_INITIALIZED</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a37f73cb92b656b514391f363a8f8ee55</field>
    <field name="keywords">TINYWINDOW_ERROR_NOT_INITIALIZED</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_ALREADY_INITIALIZED</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a670614b5254be65ff3019ef417a84686</field>
    <field name="keywords">TINYWINDOW_ERROR_ALREADY_INITIALIZED</field>
    <field name="text">if the window was already initialized</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_INVALID_TITLEBAR</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a1b504cd41bded149d7989fa5221cb7d2</field>
    <field name="keywords">TINYWINDOW_ERROR_INVALID_TITLEBAR</field>
    <field name="text">if the Title-bar text given was invalid</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_INVALID_EVENT</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a9fb722109f3819ea2bcc695cac1e0e31</field>
    <field name="keywords">TINYWINDOW_ERROR_INVALID_EVENT</field>
    <field name="text">if the given event callback was invalid</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWIDNOW_ERROR_WINDOW_NOT_FOUND</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#afd85e2bd7f1182b592d3000255919368</field>
    <field name="keywords">TINYWIDNOW_ERROR_WINDOW_NOT_FOUND</field>
    <field name="text">if the window was not found in the window manager</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_INVALID_WINDOWSTYLE</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a17d63389ab5a52ab31837080dcb49b6b</field>
    <field name="keywords">TINYWINDOW_ERROR_INVALID_WINDOWSTYLE</field>
    <field name="text">if the window style gives is invalid</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_INVALID_WINDOW</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a634ed6a2492f4fc35e0de7dbda49372d</field>
    <field name="keywords">TINYWINDOW_ERROR_INVALID_WINDOW</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_FUNCTION_NOT_IMPLEMENTED</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ab7f920c882963d841e831e7f6978acc5</field>
    <field name="keywords">TINYWINDOW_ERROR_FUNCTION_NOT_IMPLEMENTED</field>
    <field name="text">if the function has not yet been implemented in the current version of the API</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_LINUX_CANNOT_CONNECT_X_SERVER</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a6c5d4171e1e70dd173aa76fb8ecbb9e8</field>
    <field name="keywords">TINYWINDOW_ERROR_LINUX_CANNOT_CONNECT_X_SERVER</field>
    <field name="text">Linux if cannot connect to X11 server</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_LINUX_INVALID_VISUALINFO</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a01bb830f91909eddd26fadf32edc6010</field>
    <field name="keywords">TINYWINDOW_ERROR_LINUX_INVALID_VISUALINFO</field>
    <field name="text">Linux if visual information given was invalid</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_LINUX_CANNOT_CREATE_WINDOW</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#acd7d605ebfa07ec1815bd6ebbb77ede3</field>
    <field name="keywords">TINYWINDOW_ERROR_LINUX_CANNOT_CREATE_WINDOW</field>
    <field name="text">Linux when X11 fails to create a new window</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_LINUX_FUNCTION_NOT_IMPLEMENTED</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a86e98e4c69d0f4aa02502d3a9f3101ca</field>
    <field name="keywords">TINYWINDOW_ERROR_LINUX_FUNCTION_NOT_IMPLEMENTED</field>
    <field name="text">Linux when the function has not yet been implemented on the Linux in the current version of the API</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_WINDOWS_CANNOT_CREATE_WINDOW</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#aa6ceb6ec48b0191d45e7933148f183f1</field>
    <field name="keywords">TINYWINDOW_ERROR_WINDOWS_CANNOT_CREATE_WINDOW</field>
    <field name="text">Windows when Win32 cannot create a window</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_WINDOWS_CANNOT_INITIALIZE</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#af18f8e2265309b9b4bbf5f120605b271</field>
    <field name="keywords">TINYWINDOW_ERROR_WINDOWS_CANNOT_INITIALIZE</field>
    <field name="text">Windows when Win32 cannot initialize</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_ERROR_WINDOWS_FUNCTION_NOT_IMPLEMENTED</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#af956817b5e035054f83b8646dd361982</field>
    <field name="keywords">TINYWINDOW_ERROR_WINDOWS_FUNCTION_NOT_IMPLEMENTED</field>
    <field name="text">Windows when a function has yet to be implemented on the Windows platform in the current version of the API</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_WARNING_NOT_CURRENT_CONTEXT</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#acadcca22b2aaa0b59c289cd74c680e60</field>
    <field name="keywords">TINYWINDOW_WARNING_NOT_CURRENT_CONTEXT</field>
    <field name="text">if using calling member functions of a window that is not the current window being drawn to</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TINYWINDOW_WARNING_NO_GL_EXTENSIONS</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ae32ce0a0192b8a1844ea96d8254e4a67</field>
    <field name="keywords">TINYWINDOW_WARNING_NO_GL_EXTENSIONS</field>
    <field name="text">if your computer does not support any OpenGL extensions</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">LINUX_FUNCTION</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a503dd4e9d58f5dae1a84e3208a9e5a6c</field>
    <field name="keywords">LINUX_FUNCTION</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">LINUX_DECORATOR</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a621f8afe0da9974d1039b2af9bb07d57</field>
    <field name="keywords">LINUX_DECORATOR</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">typedef</field>
    <field name="name">onKeyEvent_t</field>
    <field name="args">)(GLuint key, GLboolean keyState)</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ab6bfb7c3474976447e0f240eacabb4ae</field>
    <field name="keywords">onKeyEvent_t</field>
    <field name="text">To be called when a key event has occurred</field>
  </doc>
  <doc>
    <field name="type">typedef</field>
    <field name="name">onMouseButtonEvent_t</field>
    <field name="args">)(GLuint button, GLboolean buttonState)</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a04eb8c23949696a3b82591fa9e09e036</field>
    <field name="keywords">onMouseButtonEvent_t</field>
    <field name="text">To be called when a Mouse button event has occurred</field>
  </doc>
  <doc>
    <field name="type">typedef</field>
    <field name="name">onMouseWheelEvent_t</field>
    <field name="args">)(GLuint wheelDirection)</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a489a92280b660266d34a8b5c3cea3bb7</field>
    <field name="keywords">onMouseWheelEvent_t</field>
    <field name="text">To be called when a mouse wheel event has occurred</field>
  </doc>
  <doc>
    <field name="type">typedef</field>
    <field name="name">onDestroyedEvent_t</field>
    <field name="args">)(void)</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a906eae7be180990fe70beb9430f8de93</field>
    <field name="keywords">onDestroyedEvent_t</field>
    <field name="text">To be called when the window is being destroyed</field>
  </doc>
  <doc>
    <field name="type">typedef</field>
    <field name="name">onMaximizedEvent_t</field>
    <field name="args">)(void)</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a8df01c54c81ace6f38d6ce7a5bdc6362</field>
    <field name="keywords">onMaximizedEvent_t</field>
    <field name="text">To be called when the window has been maximized</field>
  </doc>
  <doc>
    <field name="type">typedef</field>
    <field name="name">onMinimizedEvent_t</field>
    <field name="args">)(void)</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ace324dcd3c1fd88d7d48dda8847af385</field>
    <field name="keywords">onMinimizedEvent_t</field>
    <field name="text">To be called when the window has been minimized</field>
  </doc>
  <doc>
    <field name="type">typedef</field>
    <field name="name">onFocusEvent_t</field>
    <field name="args">)(GLboolean inFocus)</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#ae43e905bfb95a1c05ca5a23d6307a174</field>
    <field name="keywords">onFocusEvent_t</field>
    <field name="text">To be called when the window has gained event focus</field>
  </doc>
  <doc>
    <field name="type">typedef</field>
    <field name="name">onMovedEvent_t</field>
    <field name="args">)(GLuint x, GLuint y)</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a3e2ca61d74863da8d0aafbca619c6abe</field>
    <field name="keywords">onMovedEvent_t</field>
    <field name="text">To be called when the window has been moved</field>
  </doc>
  <doc>
    <field name="type">typedef</field>
    <field name="name">onResizeEvent_t</field>
    <field name="args">)(GLuint width, GLuint height)</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a697426f7bf106c0c4909b3926fac5147</field>
    <field name="keywords">onResizeEvent_t</field>
    <field name="text">To be called when the window has been resized</field>
  </doc>
  <doc>
    <field name="type">typedef</field>
    <field name="name">onMouseMoveEvent_t</field>
    <field name="args">)(GLuint windowX, GLuint windowY, GLuint screenX, GLuint screenY)</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#a47f922a409578aec94f5779572bcd63c</field>
    <field name="keywords">onMouseMoveEvent_t</field>
    <field name="text">To be called when the mouse has been moved within the window</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">PrintWarningMessage</field>
    <field name="args">(GLuint warningNumber)</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#adc551814545f4693a2012609e66a7a6f</field>
    <field name="keywords">PrintWarningMessage</field>
    <field name="text">if your computer does not support any OpenGL extensions if using calling member functions of a window that is not the current window being drawn to</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">PrintErrorMessage</field>
    <field name="args">(GLuint errorNumber)</field>
    <field name="url">d7/d9c/TinyWindow_8h.html#aa5ac9a33bfecde9945f030c2bef196c1</field>
    <field name="keywords">PrintErrorMessage</field>
    <field name="text">if a window tries to use a graphical function without a context if an invalid window name was given if an invalid window index was given if an invalid window state was given if an invalid window resolution was given if the OpenGL context for the window is invalid if the window already has an OpenGL context if the window is being used without being initialized if the window was already initialized if the Title-bar text given was invalid if the given event callback was invalid if the window was not found in the window manager if the window style gives is invalid if the function has not yet been implemented in the current version of the API Linux if cannot connect to X11 server Linux if visual information given was invalid Linux when X11 fails to create a new window Linux when the function has not yet been implemented on the Linux in the current version of the API Windows when Win32 cannot create a window Windows when a function has yet to be implemented on the Windows platform in the current version of the API</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">TinyWindow.h</field>
    <field name="url">.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">errorNumber TINYWINDOW_ERROR_NO_CONTEXT printf TINYWINDOW_ERROR_INVALID_WINDOW_NAME printf TINYWINDOW_ERROR_INVALID_WINDOW_INDEX printf TINYWINDOW_ERROR_INVALID_WINDOW_STATE printf TINYWINDOW_ERROR_INVALID_RESOLUTION printf TINYWINDOW_ERROR_INVALID_CONTEXT printf TINYWINDOW_ERROR_EXISTING_CONTEXT printf TINYWINDOW_ERROR_NOT_INITIALIZED printf TINYWINDOW_ERROR_ALREADY_INITIALIZED printf TINYWINDOW_ERROR_INVALID_TITLEBAR printf TINYWINDOW_ERROR_INVALID_EVENT printf TINYWIDNOW_ERROR_WINDOW_NOT_FOUND printf TINYWINDOW_ERROR_INVALID_WINDOWSTYLE printf TINYWINDOW_ERROR_INVALID_WINDOW printf TINYWINDOW_ERROR_FUNCTION_NOT_IMPLEMENTED printf TINYWINDOW_ERROR_LINUX_CANNOT_CONNECT_X_SERVER printf TINYWINDOW_ERROR_LINUX_INVALID_VISUALINFO printf TINYWINDOW_ERROR_LINUX_CANNOT_CREATE_WINDOW printf TINYWINDOW_ERROR_LINUX_FUNCTION_NOT_IMPLEMENTED printf TINYWINDOW_ERROR_WINDOWS_CANNOT_CREATE_WINDOW printf TINYWINDOW_ERROR_WINDOWS_FUNCTION_NOT_IMPLEMENTED printf printf warningNumber TINYWINDOW_WARNING_NO_GL_EXTENSIONS printf TINYWINDOW_WARNING_NOT_CURRENT_CONTEXT printf printf GetInstance windowList empty CurrentWindow GetInstance windowList CurrentWindow GetInstance windowList endif CurrentWindow GetInstance windowList clear GetInstance IsInitialized IsValid windowName tWindow newWindow tWindow newWindow name windowName newWindow resolution width newWindow resolution height newWindow colourBits colourBits newWindow depthBits depthBits newWindow stencilBits stencilBits GetInstance windowList push_back newWindow newWindow iD GetNumWindows InitializeWindow newWindow GetInstance PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED GetInstance IsInitialized DoesExistByIndex windowIndex Windows_DisableDecorators GetWindowByIndex windowIndex decorators Linux_DisableDecorators GetWindowByIndex windowIndex decorators FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName Windows_DisableDecorators GetWindowByName windowName decorators Linux_DisableDecorators GetWindowByName windowName decorators FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized windowIndex GetInstance windowList size FOUNDATION_OK PrintErrorMessage TINYWINDOW_ERROR_INVALID_WINDOW_INDEX FOUNDATION_ERROR FOUNDATION_ERROR GetInstance IsInitialized IsValid windowName window GetInstance windowList window GetInstance windowList strcmp window name windowName GL_TRUE PrintErrorMessage TINYWINDOW_ERROR_INVALID_WINDOW_NAME GL_FALSE GL_FALSE GetInstance IsInitialized DoesExistByIndex windowIndex Windows_EnableDecorators GetWindowByIndex windowIndex decorators Linux_EnableDecorators GetWindowByIndex windowIndex decorators FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowname Windows_EnableDecorators GetWindowByName windowname decorators Linux_EnableDecorators GetWindowByName windowname decorators FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex Windows_Focus GetWindowByIndex windowIndex newState Linux_Focus GetWindowByIndex windowIndex newState FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NO_CONTEXT FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName Windows_Focus GetWindowByName windowName newState Linux_Focus GetWindowByName windowName newState FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GLint visualAttributes GLX_X_RENDERABLE GL_TRUE GLX_DRAWABLE_TYPE GLX_WINDOW_BIT GLX_X_VISUAL_TYPE GLX_TRUE_COLOR GLX_RED_SIZE givenWindow colourBits GLX_GREEN_SIZE givenWindow colourBits GLX_BLUE_SIZE givenWindow colourBits GLX_ALPHA_SIZE givenWindow colourBits GLX_DEPTH_SIZE givenWindow depthBits GLX_STENCIL_SIZE givenWindow stencilBits GLX_DOUBLEBUFFER GL_TRUE None GLint frameBufferCount GLuint bestBufferConfig bestNumSamples GLXFBConfig configs glXChooseFBConfig GetDisplay visualAttributes frameBufferCount GLuint currentConfig currentConfig frameBufferCount currentConfig XVisualInfo visualInfo glXGetVisualFromFBConfig GetDisplay configs currentConfig visualInfo GLint samples sampleBuffer glXGetFBConfigAttrib GetDisplay configs currentConfig GLX_SAMPLE_BUFFERS sampleBuffer glXGetFBConfigAttrib GetDisplay configs currentConfig GLX_SAMPLES samples sampleBuffer samples bestBufferConfig currentConfig bestNumSamples samples XFree visualInfo GLXFBConfig BestConfig configs bestBufferConfig XFree configs BestConfig GetInstance currentDisplay windowManager::instance windowManager::instance windowManager windowManager::instance windowManager::instance GetInstance IsInitialized x GetInstance screenMousePosition y GetInstance screenMousePosition FOUNDATION_OK PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized GetInstance screenMousePosition PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED GetInstance IsInitialized DoesExistByIndex windowIndex x GetWindowByIndex windowIndex mousePosition y GetWindowByIndex windowIndex mousePosition FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex mousePosition PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED GetInstance IsInitialized DoesExistByName windowName x GetWindowByName windowName mousePosition y GetWindowByName windowName mousePosition FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName mousePosition FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED GetInstance IsInitialized GetInstance windowList size PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized RECT screen HWND desktop GetDesktopWindow GetWindowRect desktop screen GetInstance screenResolution screen right GetInstance screenResolution screen bottom GetInstance screenResolution GetInstance screenResolution WidthOfScreen XDefaultScreenOfDisplay GetInstance currentDisplay GetInstance screenResolution HeightOfScreen XDefaultScreenOfDisplay GetInstance currentDisplay GetInstance screenResolution PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED GetInstance IsInitialized RECT screen HWND desktop GetDesktopWindow GetWindowRect desktop screen width screen right Height screen bottom width WidthOfScreen XDefaultScreenOfDisplay GetInstance currentDisplay Height HeightOfScreen XDefaultScreenOfDisplay GetInstance currentDisplay GetInstance screenResolution width GetInstance screenResolution Height FOUNDATION_OK PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR currentEvent type Expose GetWindowByHandle currentEvent xexpose window DestroyNotify GetWindowByHandle currentEvent xdestroywindow window CreateNotify GetWindowByHandle currentEvent xcreatewindow window KeyPress GetWindowByHandle currentEvent xkey window KeyRelease GetWindowByHandle currentEvent xkey window ButtonPress GetWindowByHandle currentEvent xbutton window ButtonRelease GetWindowByHandle currentEvent xbutton window MotionNotify GetWindowByHandle currentEvent xmotion window FocusIn GetWindowByHandle currentEvent xfocus window FocusOut GetWindowByHandle currentEvent xfocus window ResizeRequest GetWindowByHandle currentEvent xresizerequest window ConfigureNotify GetWindowByHandle currentEvent xconfigure window PropertyNotify GetWindowByHandle currentEvent xproperty window GravityNotify GetWindowByHandle currentEvent xgravity window ClientMessage GetWindowByHandle currentEvent xclient window VisibilityNotify GetWindowByHandle currentEvent xvisibility window iter GetInstance windowList iter windowHandle windowHandle iter windowIndex GetInstance windowList size GetWindowInList windowIndex window GetInstance windowList window GetInstance windowList strcmp window name windowName window GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName iD FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR IsValid windowName window GetInstance windowList window GetInstance windowList window name windowName window WindowExists windowIndex window GetInstance windowList window iD windowIndex window window GetInstance windowList window iD windowIndex window GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex currentState WINDOWSTATE_FULLSCREEN FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NO_CONTEXT FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName currentState WINDOWSTATE_FULLSCREEN FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NO_CONTEXT FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex inFocus FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName inFocus FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex currentState WINDOWSTATE_MAXIMIZED FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName currentState WINDOWSTATE_MAXIMIZED FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex currentState WINDOWSTATE_MINIMIZED FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName currentState WINDOWSTATE_MINIMIZED FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex name FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex x GetWindowByIndex windowIndex position y GetWindowByIndex windowIndex position FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex position PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED GetInstance IsInitialized DoesExistByName windowName x GetWindowByName windowName position y GetWindowByName windowName position FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName position PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED GetInstance IsInitialized DoesExistByIndex windowIndex width GetWindowByIndex windowIndex resolution height GetWindowByIndex windowIndex resolution FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex resolution PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED GetInstance IsInitialized DoesExistByName windowName width GetWindowByName windowName resolution height GetWindowByName windowName resolution FOUNDATION_ERROR FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName resolution PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex shouldClose FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName shouldClose FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance isInitialized GL_FALSE Windows_Initialize Linux_Initialize GLuint display windowManager::GetDisplay window AtomState XInternAtom display GL_FALSE window AtomFullScreen XInternAtom display GL_FALSE window AtomMaxHorz XInternAtom display GL_FALSE window AtomMaxVert XInternAtom display GL_FALSE window AtomClose XInternAtom display GL_FALSE window AtomHidden XInternAtom display GL_FALSE window AtomActive XInternAtom display GL_FALSE window AtomDemandsAttention XInternAtom display GL_FALSE window AtomFocused XInternAtom display GL_FALSE window AtomCardinal XInternAtom display GL_FALSE window AtomIcon XInternAtom display GL_FALSE window AtomHints XInternAtom display GL_TRUE window AtomWindowType XInternAtom display GL_FALSE window AtomWindowTypeDesktop XInternAtom display GL_FALSE window AtomWindowTypeSplash XInternAtom display GL_FALSE window AtomWindowTypeNormal XInternAtom display GL_FALSE window AtomAllowedActions XInternAtom display GL_FALSE window AtomActionResize XInternAtom display GL_FALSE window AtomActionMinimize XInternAtom display GL_FALSE window AtomActionShade XInternAtom display GL_FALSE window AtomActionMaximizeHorz XInternAtom display GL_FALSE window AtomActionMaximizeVert XInternAtom display GL_FALSE window AtomActionClose XInternAtom display GL_FALSE window AtomDesktopGeometry XInternAtom display GL_FALSE Windows_InitializeGL window Linux_InitializeGL window Windows_InitializeWindow window Linux_InitializeWindow window GetInstance isInitialized stringParameter onKeyPressed onMouseWheelEvent onMaximized onFocus onMoved onMouseMove decorators DECORATOR_CLOSEBUTTON GLboolean minimizeEnabled maximizeEnabled decorators DECORATOR_MAXIMIZEBUTTON maximizeEnabled GL_TRUE decorators DECORATOR_MINIMIZEBUTTON minimizeEnabled GL_TRUE window currentWindowStyle LINUX_DECORATOR_CLOSE maximizeEnabled window currentWindowStyle LINUX_DECORATOR_MAXIMIZE minimizeEnabled window currentWindowStyle LINUX_DECORATOR_MINIMIZE window decorators decorators DECORATOR_MINIMIZEBUTTON window currentWindowStyle LINUX_DECORATOR_MINIMIZE window decorators decorators DECORATOR_MAXIMIZEBUTTON GLboolean minimizeEnabled decorators DECORATOR_MINIMIZEBUTTON minimizeEnabled GL_TRUE window currentWindowStyle LINUX_DECORATOR_MAXIMIZE minimizeEnabled window currentWindowStyle LINUX_DECORATOR_MINIMIZE window decorators decorators DECORATOR_ICON decorators DECORATOR_TITLEBAR window decorators LINUX_DECORATOR_BORDER decorators DECORATOR_BORDER window decorators decorators DECORATOR_SIZEABLEBORDER window decorators hints LINUX_FUNCTION LINUX_DECORATOR window currentWindowStyle window decorators XChangeProperty GetDisplay window windowHandle window AtomHints XA_ATOM PropModeReplace hints XMapWindow GetDisplay window windowHandle decorators DECORATOR_CLOSEBUTTON window currentWindowStyle LINUX_DECORATOR_CLOSE window decorators decorators DECORATOR_MINIMIZEBUTTON window currentWindowStyle LINUX_DECORATOR_MINIMIZE window decorators decorators DECORATOR_MAXIMIZEBUTTON window currentWindowStyle LINUX_DECORATOR_MAXIMIZE window decorators decorators DECORATOR_ICON decorators DECORATOR_TITLEBAR window decorators decorators DECORATOR_BORDER window decorators decorators DECORATOR_SIZEABLEBORDER window decorators hints LINUX_FUNCTION LINUX_DECORATOR window currentWindowStyle window decorators XChangeProperty GetDisplay window windowHandle window AtomHints XA_ATOM PropModeReplace hints XMapWindow GetDisplay window windowHandle newFocusState XMapWindow windowManager::GetDisplay window windowHandle XUnmapWindow windowManager::GetDisplay window windowHandle XEvent currentEvent memset currentEvent currentEvent currentEvent xany type ClientMessage currentEvent xclient message_type window AtomState currentEvent xclient format currentEvent xclient window window windowHandle currentEvent xclient data l window currentState WINDOWSTATE_FULLSCREEN currentEvent xclient data l window AtomFullScreen XSendEvent windowManager::GetDisplay XDefaultRootWindow windowManager::GetDisplay SubstructureNotifyMask currentEvent currentEvent type MotionNotify ButtonPress ButtonRelease ColormapNotify EnterNotify LeaveNotify Expose GraphicsExpose NoExpose FocusIn FocusOut KeymapNotify KeyPress KeyRelease PropertyNotify ResizeRequest CirculateNotify ConfigureNotify DestroyNotify GravityNotify MapNotify ReparentNotify UnmapNotify MapRequest ClientMessage MappingNotify SelectionClear SelectionNotify SelectionRequest VisibilityNotify GetInstance currentDisplay XOpenDisplay GetInstance currentDisplay PrintErrorMessage TINYWINDOW_ERROR_LINUX_CANNOT_CONNECT_X_SERVER FOUNDATION_ERROR GetInstance screenResolution WidthOfScreen XScreenOfDisplay GetInstance currentDisplay DefaultScreen GetInstance currentDisplay GetInstance screenResolution HeightOfScreen XScreenOfDisplay GetInstance currentDisplay DefaultScreen GetInstance currentDisplay GetInstance isInitialized GL_TRUE FOUNDATION_OK window context window context glXCreateContext windowManager::GetDisplay window visualInfo GL_TRUE window context glXMakeCurrent GetDisplay window windowHandle window context XWindowAttributes l_Attributes XGetWindowAttributes GetDisplay window windowHandle l_Attributes window position l_Attributes x window position l_Attributes y window contextCreated GL_TRUE FOUNDATION_OK PrintErrorMessage TINYWINDOW_ERROR_EXISTING_CONTEXT FOUNDATION_ERROR FOUNDATION_ERROR window attributes GLint GLX_RGBA GLX_DOUBLEBUFFER GLX_DEPTH_SIZE window depthBits None window decorators window currentWindowStyle LINUX_DECORATOR_CLOSE LINUX_DECORATOR_MAXIMIZE LINUX_DECORATOR_MINIMIZE LINUX_DECORATOR_MOVE windowManager::GetDisplay PrintErrorMessage TINYWINDOW_ERROR_LINUX_CANNOT_CONNECT_X_SERVER exit window visualInfo glXChooseVisual windowManager::GetDisplay window attributes window visualInfo PrintErrorMessage TINYWINDOW_ERROR_LINUX_INVALID_VISUALINFO exit window setAttributes colormap XCreateColormap GetDisplay DefaultRootWindow GetDisplay window visualInfo visual AllocNone window setAttributes event_mask ExposureMask KeyPressMask KeyReleaseMask MotionNotify ButtonPressMask ButtonReleaseMask FocusIn FocusOut Button1MotionMask Button2MotionMask Button3MotionMask Button4MotionMask Button5MotionMask PointerMotionMask FocusChangeMask VisibilityChangeMask PropertyChangeMask SubstructureNotifyMask window windowHandle XCreateWindow windowManager::GetDisplay XDefaultRootWindow windowManager::GetDisplay window resolution window resolution window visualInfo depth InputOutput window visualInfo visual CWColormap CWEventMask window setAttributes window windowHandle PrintErrorMessage TINYWINDOW_ERROR_LINUX_CANNOT_CREATE_WINDOW exit XMapWindow GetDisplay window windowHandle XStoreName GetDisplay window windowHandle window name InitializeAtomics window XSetWMProtocols GetDisplay window windowHandle window AtomClose GL_TRUE Linux_InitializeGL window GL_TRUE XEvent currentEvent memset currentEvent currentEvent currentEvent xany type ClientMessage currentEvent xclient message_type window AtomState currentEvent xclient format currentEvent xclient window window windowHandle currentEvent xclient data l window currentState WINDOWSTATE_MAXIMIZED currentEvent xclient data l window AtomMaxVert currentEvent xclient data l window AtomMaxHorz XSendEvent windowManager::GetDisplay XDefaultRootWindow windowManager::GetDisplay SubstructureNotifyMask currentEvent window currentState WINDOWSTATE_MINIMIZED XIconifyWindow windowManager::GetDisplay window windowHandle XMapWindow windowManager::GetDisplay window windowHandle XEventsQueued GetInstance GetDisplay QueuedAfterReading XNextEvent GetInstance currentDisplay GetInstance currentEvent XEvent currentEvent GetInstance currentEvent Linux_ProcessEvents currentEvent tWindow window GetWindowByEvent currentEvent currentEvent type Expose DestroyNotify IsValid window destroyedEvent window destroyedEvent printf ShutdownWindow window KeyPress GLuint functionKeysym XKeycodeToKeysym GetInstance currentDisplay currentEvent xkey keycode functionKeysym window keys functionKeysym KEYSTATE_DOWN IsValid window keyEvent window keyEvent functionKeysym KEYSTATE_DOWN window keys Linux_TranslateKey functionKeysym KEYSTATE_DOWN IsValid window keyEvent window keyEvent Linux_TranslateKey functionKeysym KEYSTATE_DOWN KeyRelease GLboolean isRetriggered GL_FALSE XEventsQueued GetInstance currentDisplay QueuedAfterReading XEvent nextEvent XPeekEvent GetInstance currentDisplay nextEvent nextEvent type KeyPress nextEvent xkey time currentEvent xkey time nextEvent xkey keycode currentEvent xkey keycode GLuint functionKeysym XKeycodeToKeysym GetInstance currentDisplay nextEvent xkey keycode XNextEvent GetInstance currentDisplay currentEvent window keyEvent Linux_TranslateKey functionKeysym KEYSTATE_DOWN isRetriggered GL_TRUE isRetriggered GLuint functionKeysym XKeycodeToKeysym GetInstance currentDisplay currentEvent xkey keycode functionKeysym window keys functionKeysym KEYSTATE_UP IsValid window keyEvent window keyEvent functionKeysym KEYSTATE_UP window keys Linux_TranslateKey functionKeysym KEYSTATE_UP IsValid window keyEvent window keyEvent Linux_TranslateKey functionKeysym KEYSTATE_UP IsValid window keyEvent window keyEvent Linux_TranslateKey functionKeysym KEYSTATE_UP ButtonPress currentEvent xbutton button window mouseButton MOUSE_LEFTBUTTON MOUSE_BUTTONDOWN IsValid window mouseButtonEvent window mouseButtonEvent MOUSE_LEFTBUTTON MOUSE_BUTTONDOWN window mouseButton MOUSE_MIDDLEBUTTON MOUSE_BUTTONDOWN IsValid window mouseButtonEvent window mouseButtonEvent MOUSE_MIDDLEBUTTON MOUSE_BUTTONDOWN window mouseButton MOUSE_RIGHTBUTTON MOUSE_BUTTONDOWN IsValid window mouseButtonEvent window mouseButtonEvent MOUSE_RIGHTBUTTON MOUSE_BUTTONDOWN window mouseButton MOUSE_SCROLL_UP MOUSE_BUTTONDOWN IsValid window mouseWheelEvent window mouseWheelEvent MOUSE_SCROLL_DOWN window mouseButton MOUSE_SCROLL_DOWN MOUSE_BUTTONDOWN IsValid window mouseWheelEvent window mouseWheelEvent MOUSE_SCROLL_DOWN ButtonRelease currentEvent xbutton button window mouseButton MOUSE_LEFTBUTTON MOUSE_BUTTONUP IsValid window mouseButtonEvent window mouseButtonEvent MOUSE_LEFTBUTTON MOUSE_BUTTONUP window mouseButton MOUSE_MIDDLEBUTTON MOUSE_BUTTONUP IsValid window mouseButtonEvent window mouseButtonEvent MOUSE_MIDDLEBUTTON MOUSE_BUTTONUP window mouseButton MOUSE_RIGHTBUTTON MOUSE_BUTTONUP IsValid window mouseButtonEvent window mouseButtonEvent MOUSE_RIGHTBUTTON MOUSE_BUTTONUP window mouseButton MOUSE_SCROLL_UP MOUSE_BUTTONDOWN window mouseButton MOUSE_SCROLL_DOWN MOUSE_BUTTONDOWN MotionNotify window mousePosition currentEvent xmotion x window mousePosition currentEvent xmotion y GetInstance screenMousePosition currentEvent xmotion x_root GetInstance screenMousePosition currentEvent xmotion y_root IsValid window mouseMoveEvent window mouseMoveEvent currentEvent xmotion x currentEvent xmotion y currentEvent xmotion x_root currentEvent xmotion y_root FocusOut window inFocus GL_FALSE IsValid window focusEvent window focusEvent window inFocus FocusIn window inFocus GL_TRUE IsValid window focusEvent window focusEvent window inFocus ResizeRequest window resolution currentEvent xresizerequest width window resolution currentEvent xresizerequest height glViewport window resolution window resolution IsValid window resizeEvent window resizeEvent currentEvent xresizerequest width currentEvent xresizerequest height ConfigureNotify glViewport currentEvent xconfigure width currentEvent xconfigure height GLuint currentEvent xconfigure width window resolution GLuint currentEvent xconfigure height window resolution IsValid window resizeEvent window resizeEvent currentEvent xconfigure width currentEvent xconfigure height window resolution currentEvent xconfigure width window resolution currentEvent xconfigure height GLuint currentEvent xconfigure x window position GLuint currentEvent xconfigure y window position IsValid window movedEvent window movedEvent currentEvent xconfigure x currentEvent xconfigure y window position currentEvent xconfigure x window position currentEvent xconfigure y PropertyNotify Atom type GLint format ulong numItems bytesAfter properties XGetWindowProperty windowManager::GetDisplay currentEvent xproperty window window AtomState LONG_MAX GL_FALSE AnyPropertyType type format numItems bytesAfter properties properties format GLuint currentItem currentItem numItems currentItem currentProperty properties currentItem currentProperty window AtomHidden IsValid window minimizedEvent window minimizedEvent currentProperty window AtomMaxVert currentProperty window AtomMaxVert IsValid window maximizedEvent window maximizedEvent currentProperty window AtomFocused currentProperty window AtomDemandsAttention printf GravityNotify ClientMessage atomName XGetAtomName windowManager::GetDisplay currentEvent xclient message_type IsValid atomName Atom currentEvent xclient data l window AtomClose printf window shouldClose GL_TRUE IsValid window destroyedEvent window destroyedEvent ShutdownWindow window Atom currentEvent xclient data l window AtomFullScreen XMapWindow windowManager::GetDisplay window windowHandle XWarpPointer windowManager::GetInstance currentDisplay window windowHandle window windowHandle window position window position window resolution window resolution window mousePosition window mousePosition XWarpPointer GetInstance currentDisplay None XDefaultRootWindow GetInstance currentDisplay GetScreenResolution GetScreenResolution x y PrintErrorMessage TINYWINDOW_ERROR_LINUX_FUNCTION_NOT_IMPLEMENTED XWindowChanges windowChanges windowChanges x window position windowChanges y window position XConfigureWindow windowManager::GetDisplay window windowHandle CWX CWY windowChanges XResizeWindow windowManager::GetDisplay window windowHandle window resolution window resolution windowStyle WINDOWSTYLE_DEFAULT window decorators L window currentWindowStyle LINUX_DECORATOR_MOVE LINUX_DECORATOR_CLOSE LINUX_DECORATOR_MAXIMIZE LINUX_DECORATOR_MINIMIZE Hints LINUX_FUNCTION LINUX_DECORATOR window currentWindowStyle window decorators XChangeProperty GetDisplay window windowHandle window AtomHints XA_ATOM PropModeReplace Hints XMapWindow GetDisplay window windowHandle WINDOWSTYLE_BARE window decorators L window currentWindowStyle L Hints LINUX_FUNCTION LINUX_DECORATOR window currentWindowStyle window decorators XChangeProperty GetDisplay window windowHandle window AtomHints XA_ATOM PropModeReplace Hints XMapWindow GetDisplay window windowHandle WINDOWSTYLE_POPUP window decorators window currentWindowStyle L Hints LINUX_FUNCTION LINUX_DECORATOR window currentWindowStyle window decorators XChangeProperty GetDisplay window windowHandle window AtomHints XA_ATOM PropModeReplace Hints XMapWindow GetDisplay window windowHandle PrintErrorMessage TINYWINDOW_ERROR_INVALID_WINDOWSTYLE XCloseDisplay GetInstance currentDisplay window currentState WINDOWSTATE_FULLSCREEN RestoreWindowByName window name glXDestroyContext windowManager::GetDisplay window context XUnmapWindow windowManager::GetDisplay window windowHandle XDestroyWindow windowManager::GetDisplay window windowHandle window windowHandle window context keySymbol XK_Escape KEY_ESCAPE XK_Home KEY_HOME XK_Left KEY_ARROW_LEFT XK_Right KEY_ARROW_RIGHT XK_Up KEY_ARROW_UP XK_Down KEY_ARROW_DOWN XK_Page_Up KEY_PAGEUP XK_Page_Down KEY_PAGEDOWN XK_End KEY_END XK_Print KEY_PRINTSCREEN XK_Insert KEY_INSERT XK_Num_Lock KEY_NUMLOCK XK_KP_Multiply KEY_KEYPAD_MULTIPLY XK_KP_Add KEY_KEYPAD_ADD XK_KP_Subtract KEY_KEYPAD_SUBTRACT XK_KP_Decimal KEY_KEYPAD_PERIOD XK_KP_Divide KEY_KEYPAD_DIVIDE XK_KP_0 KEY_KEYPAD_0 XK_KP_1 KEY_KEYPAD_1 XK_KP_2 KEY_KEYPAD_2 XK_KP_3 KEY_KEYPAD_3 XK_KP_4 KEY_KEYPAD_4 XK_KP_5 KEY_KEYPAD_5 XK_KP_6 KEY_KEYPAD_6 XK_KP_7 KEY_KEYPAD_7 XK_KP_8 KEY_KEYPAD_8 XK_KP_9 KEY_KEYPAD_9 XK_F1 KEY_F1 XK_F2 KEY_F2 XK_F3 KEY_F3 XK_F4 KEY_F4 XK_F5 KEY_F5 XK_F6 KEY_F6 XK_F7 KEY_F7 XK_F8 KEY_F8 XK_F9 KEY_F9 XK_F10 KEY_F10 XK_F11 KEY_F11 XK_F12 KEY_F12 XK_Shift_L KEY_LEFTSHIFT XK_Shift_R KEY_RIGHTSHIFT XK_Control_R KEY_RIGHTCONTROL XK_Control_L KEY_LEFTCONTROL XK_Caps_Lock KEY_CAPSLOCK XK_Alt_L KEY_LEFTALT XK_Alt_R KEY_RIGHTALT XNextEvent GetInstance currentDisplay GetInstance currentEvent XEvent currentEvent GetInstance currentEvent Linux_ProcessEvents currentEvent GetInstance IsInitialized DoesExistByIndex windowIndex wglMakeCurrent GetWindowByIndex windowIndex deviceContextHandle GetWindowByIndex windowIndex glRenderingContextHandle glXMakeCurrent GetDisplay GetWindowByIndex windowIndex windowHandle GetWindowByIndex windowIndex context FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NO_CONTEXT FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName wglMakeCurrent GetWindowByName windowName deviceContextHandle GetWindowByName windowName glRenderingContextHandle glXMakeCurrent windowManager::GetDisplay GetWindowByName windowName windowHandle GetWindowByName windowName context FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex Windows_Maximize GetWindowByIndex windowIndex newState Linux_Maximize GetWindowByIndex windowIndex FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName newState GetWindowByName windowName currentState WINDOWSTATE_MAXIMIZED Windows_Maximize GetWindowByName windowName newState Linux_Maximize GetWindowByName windowName FOUNDATION_OK GetWindowByName windowName currentState WINDOWSTATE_NORMAL Windows_Maximize GetWindowByName windowName newState Linux_Maximize GetWindowByName windowName FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex newState GetWindowByIndex windowIndex currentState WINDOWSTATE_MINIMIZED Windows_Minimize GetWindowByIndex windowIndex newState Linux_Minimize GetWindowByIndex windowIndex FOUNDATION_OK GetWindowByIndex windowIndex currentState WINDOWSTATE_NORMAL Windows_Minimize GetWindowByIndex windowIndex newState Linux_Minimize GetWindowByIndex windowIndex FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName newState GetWindowByName windowName currentState WINDOWSTATE_MINIMIZED Windows_Minimize GetWindowByName windowName newState Linux_Minimize GetWindowByName windowName FOUNDATION_OK GetWindowByName windowName currentState WINDOWSTATE_NORMAL Windows_Minimize GetWindowByName windowName newState Linux_Minimize GetWindowByName windowName FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NO_CONTEXT FOUNDATION_ERROR GetInstance IsInitialized GetInstance Windows_PollForEvents GetInstance Linux_PollForEvents PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED GetInstance IsInitialized DoesExistByIndex windowIndex ShutdownWindow GetWindowByIndex windowIndex FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName ShutdownWindow GetWindowByName windowName FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized WindowExists windowIndex Windows_Restore GetWindowByIndex windowIndex Linux_Restore GetWindowByIndex windowIndex FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NO_CONTEXT FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName Windows_Restore GetWindowByName windowName Linux_Restore GetWindowByName windowName FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex newState GetWindowByIndex windowIndex currentState WINDOWSTATE_FULLSCREEN Windows_FullScreen GetWindowByIndex windowIndex Linux_Fullscreen GetWindowByIndex windowIndex FOUNDATION_OK GetWindowByIndex windowIndex currentState WINDOWSTATE_NORMAL Windows_FullScreen GetWindowByIndex windowIndex Linux_Fullscreen GetWindowByIndex windowIndex FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName newState GetWindowByName windowName currentState WINDOWSTATE_FULLSCREEN Windows_FullScreen GetWindowByName windowName Linux_Fullscreen GetWindowByName windowName FOUNDATION_OK GetWindowByName windowName currentState WINDOWSTATE_NORMAL Windows_FullScreen GetWindowByName windowName Linux_Fullscreen GetWindowByName windowName FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized GetInstance screenMousePosition x GetInstance screenMousePosition y Windows_SetMousePositionInScreen Linux_SetMousePositionInScreen x y FOUNDATION_OK PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex mousePosition x GetWindowByIndex windowIndex mousePosition y Windows_SetMousePosition GetWindowByIndex windowIndex Linux_SetMousePosition GetWindowByIndex windowIndex FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName mousePosition x GetWindowByName windowName mousePosition y Windows_SetMousePosition GetWindowByName windowName Linux_SetMousePosition GetWindowByName windowName FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex IsValid icon Windows_SetWindowIcon GetWindowByIndex windowIndex icon width height Linux_SetWindowIcon GetWindowByIndex windowIndex icon width height FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName IsValid icon Windows_SetWindowIcon GetWindowByName windowName icon width height Linux_SetWindowIcon GetWindowByName windowName icon width height FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex destroyedEvent onDestroyed FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName destroyedEvent onDestroyed FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex focusEvent onFocus FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName focusEvent onFocus FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex keyEvent onKey FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName keyEvent onKey FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex maximizedEvent onMaximized FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName maximizedEvent onMaximized FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex minimizedEvent onMinimized FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName minimizedEvent onMinimized FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex mouseButtonEvent onMouseButton FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName mouseButtonEvent onMouseButton FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex mouseMoveEvent onMouseMove FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName mouseMoveEvent onMouseMove FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex mouseWheelEvent onMouseWheel FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName mouseWheelEvent onMouseWheel FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex movedEvent onMoved FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName movedEvent onMoved FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex resizeEvent onResize FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName resizeEvent onResize FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName position x GetWindowByName windowName position y Windows_SetWindowPosition GetWindowByName windowName Linux_SetWindowPosition GetWindowByName windowName FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex position x GetWindowByIndex windowIndex position y Windows_SetWindowPosition GetWindowByIndex windowIndex Linux_SetWindowPosition GetWindowByIndex windowIndex FOUNDATION_OK PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized WindowExists windowIndex GetWindowByIndex windowIndex resolution width GetWindowByIndex windowIndex resolution height Windows_SetWindowResolution GetWindowByIndex windowIndex Linux_SetWindowResolution GetWindowByIndex windowIndex FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName resolution width GetWindowByName windowName resolution height Windows_SetWindowResolution GetWindowByName windowName Linux_SetWindowResolution GetWindowByName windowName FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_INVALID_CONTEXT FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex Windows_SetWindowStyle GetWindowByIndex windowIndex windowStyle Linux_SetWindowStyle GetWindowByIndex windowIndex windowStyle FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName Windows_SetWindowStyle GetWindowByName windowName windowStyle Linux_SetWindowStyle GetWindowByName windowName windowStyle FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex IsValid newName SetWindowText GetWindowByIndex windowIndex windowHandle newName XStoreName GetDisplay GetWindowByIndex windowIndex windowHandle newName FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName IsValid newTitle SetWindowText GetWindowByName windowName windowHandle newTitle XStoreName GetDisplay GetWindowByName windowName windowHandle newTitle FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR CurrentWindow GetInstance windowList CurrentWindow CurrentWindow GetInstance windowList CurrentWindow XCloseDisplay GetInstance currentDisplay GetInstance windowList clear instance Windows_ShutdownWindow window Linux_ShutdownWindow window GetInstance IsInitialized GetInstance Windows_WaitForEvents GetInstance Linux_WaitForEvents PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED windowIndex GetInstance windowList size GetInstance IsInitialized DoesExistByIndex windowIndex GetWindowByIndex windowIndex keys key FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName GetWindowByName windowName keys key FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByIndex windowIndex SwapBuffers GetWindowByIndex windowIndex deviceContextHandle glXSwapBuffers GetDisplay GetWindowByIndex windowIndex windowHandle FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR GetInstance IsInitialized DoesExistByName windowName SwapBuffers GetWindowByName windowName deviceContextHandle glXSwapBuffers GetDisplay GetWindowByName windowName windowHandle FOUNDATION_OK FOUNDATION_ERROR PrintErrorMessage TINYWINDOW_ERROR_NOT_INITIALIZED FOUNDATION_ERROR name iD NULL colourBits NULL depthBits NULL stencilBits NULL shouldClose GL_FALSE currentState WINDOWSTATE_NORMAL keyEvent mouseButtonEvent mouseWheelEvent destroyedEvent maximizedEvent minimizedEvent focusEvent movedEvent resizeEvent mouseMoveEvent initialized GL_FALSE contextCreated GL_FALSE currentWindowStyle WINDOWSTYLE_DEFAULT context</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">windowManager</field>
    <field name="url">dd/d30/classwindowManager.html</field>
    <field name="keywords">windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::windowManager</field>
    <field name="args">()</field>
    <field name="url">dd/d30/classwindowManager.html#ae80acd0fedac8b6b9a5c19d54702e81e</field>
    <field name="keywords">windowManager windowManager::windowManager windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::~windowManager</field>
    <field name="args">(void)</field>
    <field name="url">dd/d30/classwindowManager.html#a22699ef482e71752e5a95b7b034e1acc</field>
    <field name="keywords">windowManager::~windowManager windowManager</field>
    <field name="text">shutdown and delete all windows in the manager</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::ShutDown</field>
    <field name="args">(void)</field>
    <field name="url">dd/d30/classwindowManager.html#a08ec6284d6586fec1be4a90c2e32d56f</field>
    <field name="keywords">ShutDown windowManager::ShutDown windowManager</field>
    <field name="text">use this to shutdown the window manager when your program is finished</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::AddWindow</field>
    <field name="args">(const char *windowName, GLuint width=1280, GLuint height=720, GLuint colourBits=8, GLuint depthBits=8, GLuint stencilBits=8)</field>
    <field name="url">dd/d30/classwindowManager.html#ac8b59276bfcee46d0daea9cc66313795</field>
    <field name="keywords">AddWindow windowManager::AddWindow windowManager</field>
    <field name="text">use this to add a window to the manager returns a pointer to the manager which allows for the easy creation of multiple windows if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetNumWindows</field>
    <field name="args">(void)</field>
    <field name="url">dd/d30/classwindowManager.html#a249494a3e35c2d146be10056a70c8827</field>
    <field name="keywords">GetNumWindows windowManager::GetNumWindows windowManager</field>
    <field name="text">return the total amount of windows the manager has if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetMousePositionInScreen</field>
    <field name="args">(GLuint &amp;x, GLuint &amp;y)</field>
    <field name="url">dd/d30/classwindowManager.html#a1bebf0f218ed9c9ebd117f6ddaa33d90</field>
    <field name="keywords">GetMousePositionInScreen windowManager::GetMousePositionInScreen windowManager</field>
    <field name="text">return the mouse position in screen co-ordinates if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetMousePositionInScreen</field>
    <field name="args">(void)</field>
    <field name="url">dd/d30/classwindowManager.html#a3e68842c1f5b2858c24fc54333c36798</field>
    <field name="keywords">GetMousePositionInScreen windowManager::GetMousePositionInScreen windowManager</field>
    <field name="text">return the mouse position in screen co-ordinates if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetMousePositionInScreen</field>
    <field name="args">(GLuint x, GLuint y)</field>
    <field name="url">dd/d30/classwindowManager.html#a898c4c18dc16d14767c737870ab1e153</field>
    <field name="keywords">SetMousePositionInScreen windowManager::SetMousePositionInScreen windowManager</field>
    <field name="text">set the position of the mouse cursor relative to screen co-ordinates if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetScreenResolution</field>
    <field name="args">(void)</field>
    <field name="url">dd/d30/classwindowManager.html#a37e4c54ec36ed2fd7a2b6cbf0dfc456e</field>
    <field name="keywords">GetScreenResolution windowManager::GetScreenResolution windowManager</field>
    <field name="text">return the Resolution of the current screen if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetScreenResolution</field>
    <field name="args">(GLuint &amp;width, GLuint &amp;Height)</field>
    <field name="url">dd/d30/classwindowManager.html#ab1a30a67506b3a043774ae2b1f8fe22b</field>
    <field name="keywords">GetScreenResolution windowManager::GetScreenResolution windowManager</field>
    <field name="text">return the Resolution of the current screen if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowResolutionByName</field>
    <field name="args">(const char *windowName, GLuint &amp;width, GLuint &amp;height)</field>
    <field name="url">dd/d30/classwindowManager.html#aee388138a419d7ddffd0e2fb141215f2</field>
    <field name="keywords">GetWindowResolutionByName windowManager::GetWindowResolutionByName windowManager</field>
    <field name="text">return the Resolution of the given window by setting width and height if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowResolutionByIndex</field>
    <field name="args">(GLuint windowIndex, GLuint &amp;width, GLuint &amp;height)</field>
    <field name="url">dd/d30/classwindowManager.html#a07549062b61d2407335bfa5e8b5090a8</field>
    <field name="keywords">GetWindowResolutionByIndex windowManager::GetWindowResolutionByIndex windowManager</field>
    <field name="text">return the Resolution of the given window by setting width and height if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowResolutionByName</field>
    <field name="args">(const char *windowName)</field>
    <field name="url">dd/d30/classwindowManager.html#a1b79f2b36586adb7ad0df65f9c62df34</field>
    <field name="keywords">GetWindowResolutionByName windowManager::GetWindowResolutionByName windowManager</field>
    <field name="text">return the Resolution of the given Window as an array of doubles if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowResolutionByIndex</field>
    <field name="args">(GLuint windowIndex)</field>
    <field name="url">dd/d30/classwindowManager.html#a1f767b48b47fd382eac1fed77b576ee2</field>
    <field name="keywords">GetWindowResolutionByIndex windowManager::GetWindowResolutionByIndex windowManager</field>
    <field name="text">return the Resolution of the Given Window as an array of doubles if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowResolutionByName</field>
    <field name="args">(const char *windowName, GLuint width, GLuint height)</field>
    <field name="url">dd/d30/classwindowManager.html#af800c63c7c9bda690fdb6593adabd4e6</field>
    <field name="keywords">SetWindowResolutionByName windowManager::SetWindowResolutionByName windowManager</field>
    <field name="text">set the Size/Resolution of the given window if the OpenGL context for the window is invalid</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowResolutionByIndex</field>
    <field name="args">(GLuint windowIndex, GLuint width, GLuint height)</field>
    <field name="url">dd/d30/classwindowManager.html#a9f8ac254610d5980b74fd4e285889544</field>
    <field name="keywords">SetWindowResolutionByIndex windowManager::SetWindowResolutionByIndex windowManager</field>
    <field name="text">set the Size/Resolution of the given window if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowPositionByName</field>
    <field name="args">(const char *windowName, GLuint &amp;x, GLuint &amp;y)</field>
    <field name="url">dd/d30/classwindowManager.html#aefdfd8191fa9d765113b2cdd52682561</field>
    <field name="keywords">GetWindowPositionByName windowManager::GetWindowPositionByName windowManager</field>
    <field name="text">return the Position of the given window relative to screen co-ordinates by setting X and Y if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowPositionByIndex</field>
    <field name="args">(GLuint windowIndex, GLuint &amp;x, GLuint &amp;y)</field>
    <field name="url">dd/d30/classwindowManager.html#a7727204d32b91cffa18427b9265b7584</field>
    <field name="keywords">GetWindowPositionByIndex windowManager::GetWindowPositionByIndex windowManager</field>
    <field name="text">return the Position of the given window relative to screen co-ordinates by setting X and Y if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowPositionByName</field>
    <field name="args">(const char *windowName)</field>
    <field name="url">dd/d30/classwindowManager.html#a8239ca3171ccc3dc731b09cda10f8b2e</field>
    <field name="keywords">GetWindowPositionByName windowManager::GetWindowPositionByName windowManager</field>
    <field name="text">return the Position of the given window relative to screen co-ordinates as an array if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowPositionByIndex</field>
    <field name="args">(GLuint windowIndex)</field>
    <field name="url">dd/d30/classwindowManager.html#a7b0a796cf238bb0c7a4cd4eda103d53d</field>
    <field name="keywords">GetWindowPositionByIndex windowManager::GetWindowPositionByIndex windowManager</field>
    <field name="text">return the Position of the given window relative to screen co-ordinates as an array if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowPositionByName</field>
    <field name="args">(const char *windowName, GLuint x, GLuint y)</field>
    <field name="url">dd/d30/classwindowManager.html#a91fe7b88e24d30e075db11991cb9568b</field>
    <field name="keywords">SetWindowPositionByName windowManager::SetWindowPositionByName windowManager</field>
    <field name="text">set the Position of the given window relative to screen co-ordinates if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowPositionByName</field>
    <field name="args">(GLuint windowIndex, GLuint x, GLuint y)</field>
    <field name="url">dd/d30/classwindowManager.html#addec9f35953795866f698531fca92426</field>
    <field name="keywords">SetWindowPositionByName windowManager::SetWindowPositionByName windowManager</field>
    <field name="text">set the position of the given window relative to screen co-ordinates if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetMousePositionInWindowByName</field>
    <field name="args">(const char *windowName, GLuint &amp;x, GLuint &amp;y)</field>
    <field name="url">dd/d30/classwindowManager.html#a47c4f9f22849bc97dc940d07f9d0ce2c</field>
    <field name="keywords">GetMousePositionInWindowByName windowManager::GetMousePositionInWindowByName windowManager</field>
    <field name="text">return the mouse Position relative to the given window s co-ordinates by setting X and Y if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetMousePositionInWindowByIndex</field>
    <field name="args">(GLuint windowIndex, GLuint &amp;x, GLuint &amp;y)</field>
    <field name="url">dd/d30/classwindowManager.html#a46457f1efe83ec06cde0fa16fb1f9a86</field>
    <field name="keywords">GetMousePositionInWindowByIndex windowManager::GetMousePositionInWindowByIndex windowManager</field>
    <field name="text">return the mouse position relative to the given window s co-ordinates by setting X and Y if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetMousePositionInWindowByName</field>
    <field name="args">(const char *windowName)</field>
    <field name="url">dd/d30/classwindowManager.html#ab3f43033c58e2e08ac9aa3b255a2bb9e</field>
    <field name="keywords">GetMousePositionInWindowByName windowManager::GetMousePositionInWindowByName windowManager</field>
    <field name="text">return the mouse Position relative to the given window s co-ordinates as an array if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetMousePositionInWindowByIndex</field>
    <field name="args">(GLuint windowIndex)</field>
    <field name="url">dd/d30/classwindowManager.html#ad1333e3e1aecfddc91beb4e1cdd8fc93</field>
    <field name="keywords">GetMousePositionInWindowByIndex windowManager::GetMousePositionInWindowByIndex windowManager</field>
    <field name="text">return the mouse Position relative to the given window s co-ordinates as an array if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetMousePositionInWindowByName</field>
    <field name="args">(const char *windowName, GLuint x, GLuint y)</field>
    <field name="url">dd/d30/classwindowManager.html#aa6a9f5f665d6458aa549f597dbc0a5d5</field>
    <field name="keywords">SetMousePositionInWindowByName windowManager::SetMousePositionInWindowByName windowManager</field>
    <field name="text">set the mouse Position of the given window s co-ordinates if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetMousePositionInWindowByIndex</field>
    <field name="args">(GLuint windowIndex, GLuint x, GLuint y)</field>
    <field name="url">dd/d30/classwindowManager.html#ae9b23d54248817b171b836aeeaceee7d</field>
    <field name="keywords">SetMousePositionInWindowByIndex windowManager::SetMousePositionInWindowByIndex windowManager</field>
    <field name="text">set the mouse Position of the given window s co-ordinates if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::WindowGetKeyByName</field>
    <field name="args">(const char *windowName, GLuint key)</field>
    <field name="url">dd/d30/classwindowManager.html#a033ab7437f432eb1c3dba5822cd9b68e</field>
    <field name="keywords">WindowGetKeyByName windowManager::WindowGetKeyByName windowManager</field>
    <field name="text">returns the current state of the given key relative to the given window if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::WindowGetKeyByIndex</field>
    <field name="args">(GLuint windowIndex, GLuint key)</field>
    <field name="url">dd/d30/classwindowManager.html#a1e547f757116180573d23b78ad747161</field>
    <field name="keywords">WindowGetKeyByIndex windowManager::WindowGetKeyByIndex windowManager</field>
    <field name="text">returns the current state of the given key relative to the given window if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowShouldCloseByName</field>
    <field name="args">(const char *windowName)</field>
    <field name="url">dd/d30/classwindowManager.html#a0ebac75a0f3fcd20433ae4138dd7581d</field>
    <field name="keywords">GetWindowShouldCloseByName windowManager::GetWindowShouldCloseByName windowManager</field>
    <field name="text">return whether the given window should be closing if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowShouldCloseByIndex</field>
    <field name="args">(GLuint windowIndex)</field>
    <field name="url">dd/d30/classwindowManager.html#a6fc1a22115b697409415acd26c2b21cb</field>
    <field name="keywords">GetWindowShouldCloseByIndex windowManager::GetWindowShouldCloseByIndex windowManager</field>
    <field name="text">return whether the given window should be closing if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::WindowSwapBuffersByName</field>
    <field name="args">(const char *windowName)</field>
    <field name="url">dd/d30/classwindowManager.html#a167f99b92672532adb7c2f18aea90146</field>
    <field name="keywords">WindowSwapBuffersByName windowManager::WindowSwapBuffersByName windowManager</field>
    <field name="text">swap the draw buffers of the given window if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::WindowSwapBuffersByIndex</field>
    <field name="args">(GLuint windowIndex)</field>
    <field name="url">dd/d30/classwindowManager.html#af1aa65cd70ffc0ed12658770fbe6dba1</field>
    <field name="keywords">WindowSwapBuffersByIndex windowManager::WindowSwapBuffersByIndex windowManager</field>
    <field name="text">swap the draw buffers of the given window if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::MakeWindowCurrentContextByName</field>
    <field name="args">(const char *windowName)</field>
    <field name="url">dd/d30/classwindowManager.html#a6e51739a85694c50dd17a1b87895e2e4</field>
    <field name="keywords">MakeWindowCurrentContextByName windowManager::MakeWindowCurrentContextByName windowManager</field>
    <field name="text">make the given window be the current OpenGL Context to be drawn to if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::MakeWindowCurrentContextByIndex</field>
    <field name="args">(GLuint windowIndex)</field>
    <field name="url">dd/d30/classwindowManager.html#a56e8f4cf5f27ee9f803a9e11517781a8</field>
    <field name="keywords">MakeWindowCurrentContextByIndex windowManager::MakeWindowCurrentContextByIndex windowManager</field>
    <field name="text">make the given window be the current OpenGL Context to be drawn to if a window tries to use a graphical function without a context</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowIsFullScreenByName</field>
    <field name="args">(const char *windowName)</field>
    <field name="url">dd/d30/classwindowManager.html#a54975e23ce0dc36a36df9e8548924467</field>
    <field name="keywords">GetWindowIsFullScreenByName windowManager::GetWindowIsFullScreenByName windowManager</field>
    <field name="text">return whether the given window is in fullscreen mode the window is currently full screen if a window tries to use a graphical function without a context</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowIsFullScreenByIndex</field>
    <field name="args">(GLuint windowIndex)</field>
    <field name="url">dd/d30/classwindowManager.html#abbbc30db8de8f4805b2a2390f9e98989</field>
    <field name="keywords">GetWindowIsFullScreenByIndex windowManager::GetWindowIsFullScreenByIndex windowManager</field>
    <field name="text">return whether the given window is in fullscreen mode the window is currently full screen if a window tries to use a graphical function without a context</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetFullScreenByName</field>
    <field name="args">(const char *windowName, GLboolean newState)</field>
    <field name="url">dd/d30/classwindowManager.html#ace4a6427bf57595c22d46711d2ef72c4</field>
    <field name="keywords">SetFullScreenByName windowManager::SetFullScreenByName windowManager</field>
    <field name="text">toggle the given window s full screen mode the window is currently full screen the window is in its default state if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetFullScreenByIndex</field>
    <field name="args">(GLuint windowIndex, GLboolean newState)</field>
    <field name="url">dd/d30/classwindowManager.html#a3f15cdcb580cca9967ae0fd0ec4edef0</field>
    <field name="keywords">SetFullScreenByIndex windowManager::SetFullScreenByIndex windowManager</field>
    <field name="text">the window is currently full screen the window is in its default state if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowIsMinimizedByName</field>
    <field name="args">(const char *windowName)</field>
    <field name="url">dd/d30/classwindowManager.html#ad6856b87ff0d8e6abcdd4955726624e1</field>
    <field name="keywords">GetWindowIsMinimizedByName windowManager::GetWindowIsMinimizedByName windowManager</field>
    <field name="text">returns whether the given window is minimized the window is currently minimized if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowIsMinimizedByIndex</field>
    <field name="args">(GLuint windowIndex)</field>
    <field name="url">dd/d30/classwindowManager.html#a3fcb000a4413b6b78ed5af04c7375b1d</field>
    <field name="keywords">GetWindowIsMinimizedByIndex windowManager::GetWindowIsMinimizedByIndex windowManager</field>
    <field name="text">returns whether the given window is minimized the window is currently minimized if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::MinimizeWindowByName</field>
    <field name="args">(const char *windowName, GLboolean newState)</field>
    <field name="url">dd/d30/classwindowManager.html#ae285e3eee321f30ca3b40e0304a9b384</field>
    <field name="keywords">MinimizeWindowByName windowManager::MinimizeWindowByName windowManager</field>
    <field name="text">toggle the minimization state of the given window the window is currently minimized the window is in its default state if a window tries to use a graphical function without a context</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::MinimizeWindowByIndex</field>
    <field name="args">(GLuint windowIndex, GLboolean newState)</field>
    <field name="url">dd/d30/classwindowManager.html#a674798f0a8665e8c3cc49402e44ca4bf</field>
    <field name="keywords">MinimizeWindowByIndex windowManager::MinimizeWindowByIndex windowManager</field>
    <field name="text">toggle the minimization state of the window the window is currently minimized the window is in its default state if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowIsMaximizedByName</field>
    <field name="args">(const char *windowName)</field>
    <field name="url">dd/d30/classwindowManager.html#a619ad7708cc1936ba49e9f8740c77001</field>
    <field name="keywords">GetWindowIsMaximizedByName windowManager::GetWindowIsMaximizedByName windowManager</field>
    <field name="text">return whether the current window is currently maximized the window is currently maximized if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowIsMaximizedByIndex</field>
    <field name="args">(GLuint windowIndex)</field>
    <field name="url">dd/d30/classwindowManager.html#a558fe0692d2311e2bc018c49787f467b</field>
    <field name="keywords">GetWindowIsMaximizedByIndex windowManager::GetWindowIsMaximizedByIndex windowManager</field>
    <field name="text">return whether the given window is currently maximized the window is currently maximized if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::MaximizeWindowByName</field>
    <field name="args">(const char *windowName, GLboolean newState)</field>
    <field name="url">dd/d30/classwindowManager.html#afc853d3e72267013ce9e2312db07be01</field>
    <field name="keywords">MaximizeWindowByName windowManager::MaximizeWindowByName windowManager</field>
    <field name="text">toggle the maximization state of the current window the window is currently maximized the window is in its default state if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::MaximizeWindowByIndex</field>
    <field name="args">(GLuint windowIndex, GLboolean newState)</field>
    <field name="url">dd/d30/classwindowManager.html#a61b79f8b1564d43cafcfb89ee44537a9</field>
    <field name="keywords">MaximizeWindowByIndex windowManager::MaximizeWindowByIndex windowManager</field>
    <field name="text">toggle the maximization state of the current window if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowNameByIndex</field>
    <field name="args">(GLuint windowIndex)</field>
    <field name="url">dd/d30/classwindowManager.html#af3eae68af40cabdd8407195d9334d5a0</field>
    <field name="keywords">GetWindowNameByIndex windowManager::GetWindowNameByIndex windowManager</field>
    <field name="text">gets and sets for window name and index if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowIndexByName</field>
    <field name="args">(const char *windowName)</field>
    <field name="url">dd/d30/classwindowManager.html#a4ef53a3e2a4fd1168c0772ecac4b6379</field>
    <field name="keywords">GetWindowIndexByName windowManager::GetWindowIndexByName windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowTitleBarByName</field>
    <field name="args">(const char *windowName, const char *newTitle)</field>
    <field name="url">dd/d30/classwindowManager.html#a2efbd43623bad00c395e030d7a907621</field>
    <field name="keywords">SetWindowTitleBarByName windowManager::SetWindowTitleBarByName windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowTitleBarByIndex</field>
    <field name="args">(GLuint windowIndex, const char *newName)</field>
    <field name="url">dd/d30/classwindowManager.html#a24abcdff743ac63a59b5b8ffa70694ab</field>
    <field name="keywords">SetWindowTitleBarByIndex windowManager::SetWindowTitleBarByIndex windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowIconByName</field>
    <field name="args">(const char *windowName, const char *icon, GLuint width, GLuint height)</field>
    <field name="url">dd/d30/classwindowManager.html#a01f19bd0d1a926b70ee61f2be4caef18</field>
    <field name="keywords">SetWindowIconByName windowManager::SetWindowIconByName windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowIconByIndex</field>
    <field name="args">(GLuint windowIndex, const char *icon, GLuint width, GLuint height)</field>
    <field name="url">dd/d30/classwindowManager.html#a18526aaec88903d5a54e2ca37e1992b3</field>
    <field name="keywords">SetWindowIconByIndex windowManager::SetWindowIconByIndex windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowIsInFocusByName</field>
    <field name="args">(const char *windowName)</field>
    <field name="url">dd/d30/classwindowManager.html#a36e7551db26e976d6cdbb3df47567662</field>
    <field name="keywords">GetWindowIsInFocusByName windowManager::GetWindowIsInFocusByName windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowIsInFocusByIndex</field>
    <field name="args">(GLuint windowIndex)</field>
    <field name="url">dd/d30/classwindowManager.html#ac65a7de1ee5f24ab0d418d443d31d5f6</field>
    <field name="keywords">GetWindowIsInFocusByIndex windowManager::GetWindowIsInFocusByIndex windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::FocusWindowByName</field>
    <field name="args">(const char *windowName, GLboolean newState)</field>
    <field name="url">dd/d30/classwindowManager.html#a33511c6e80fa40b08c732d5b6cc680ab</field>
    <field name="keywords">FocusWindowByName windowManager::FocusWindowByName windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::FocusWindowByIndex</field>
    <field name="args">(GLuint windowIndex, GLboolean newState)</field>
    <field name="url">dd/d30/classwindowManager.html#ad0e549a457ab933265b332da821376c5</field>
    <field name="keywords">FocusWindowByIndex windowManager::FocusWindowByIndex windowManager</field>
    <field name="text">if a window tries to use a graphical function without a context</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::RestoreWindowByName</field>
    <field name="args">(const char *windowName)</field>
    <field name="url">dd/d30/classwindowManager.html#a9a43f8c14890c23bbf05862bec754e6b</field>
    <field name="keywords">RestoreWindowByName windowManager::RestoreWindowByName windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::RestoreWindowByIndex</field>
    <field name="args">(GLuint windowIndex)</field>
    <field name="url">dd/d30/classwindowManager.html#a415d0d35416a20ecb2c91bc23425fd38</field>
    <field name="keywords">RestoreWindowByIndex windowManager::RestoreWindowByIndex windowManager</field>
    <field name="text">if a window tries to use a graphical function without a context</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Initialize</field>
    <field name="args">(void)</field>
    <field name="url">dd/d30/classwindowManager.html#adc3592d71c548b51d66b43e8249158df</field>
    <field name="keywords">Initialize windowManager::Initialize windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::IsInitialized</field>
    <field name="args">(void)</field>
    <field name="url">dd/d30/classwindowManager.html#ab3bd71dd36f824dac05742231ff635fa</field>
    <field name="keywords">IsInitialized windowManager::IsInitialized windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::PollForEvents</field>
    <field name="args">(void)</field>
    <field name="url">dd/d30/classwindowManager.html#a0237bb7e57ab9a96b3f60ca7cbfaa26f</field>
    <field name="keywords">PollForEvents windowManager::PollForEvents windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::WaitForEvents</field>
    <field name="args">(void)</field>
    <field name="url">dd/d30/classwindowManager.html#adbbdeb3cb36d14a5f52c39d805c16f8c</field>
    <field name="keywords">WaitForEvents windowManager::WaitForEvents windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::RemoveWindowByName</field>
    <field name="args">(const char *windowName)</field>
    <field name="url">dd/d30/classwindowManager.html#a21baa8c2656ba009291bc2ea5191ae16</field>
    <field name="keywords">RemoveWindowByName windowManager::RemoveWindowByName windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::RemoveWindowByIndex</field>
    <field name="args">(GLuint windowIndex)</field>
    <field name="url">dd/d30/classwindowManager.html#a5c76343e76c6842f664d86b6458a6eed</field>
    <field name="keywords">RemoveWindowByIndex windowManager::RemoveWindowByIndex windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowStyleByName</field>
    <field name="args">(const char *windowName, GLuint windowStyle)</field>
    <field name="url">dd/d30/classwindowManager.html#a50504f9ebfff03ffce7b49761ba0eed1</field>
    <field name="keywords">SetWindowStyleByName windowManager::SetWindowStyleByName windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowStyleByIndex</field>
    <field name="args">(GLuint windowIndex, GLuint windowStyle)</field>
    <field name="url">dd/d30/classwindowManager.html#aead5e81918fa3f60222cd42514f46098</field>
    <field name="keywords">SetWindowStyleByIndex windowManager::SetWindowStyleByIndex windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::EnableWindowDecoratorsByName</field>
    <field name="args">(const char *windowname, GLbitfield decorators)</field>
    <field name="url">dd/d30/classwindowManager.html#aa6d870e9da395b542892e027e20336de</field>
    <field name="keywords">EnableWindowDecoratorsByName windowManager::EnableWindowDecoratorsByName windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::EnableWindowDecoratorsByIndex</field>
    <field name="args">(GLuint windowIndex, GLbitfield decorators)</field>
    <field name="url">dd/d30/classwindowManager.html#acf82f17d82c1017d9b229fbde01819e0</field>
    <field name="keywords">EnableWindowDecoratorsByIndex windowManager::EnableWindowDecoratorsByIndex windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::DisableWindowDecoratorByName</field>
    <field name="args">(const char *windowName, GLbitfield decorators)</field>
    <field name="url">dd/d30/classwindowManager.html#a25b6e7c0d94d69c716e41f7c64230c82</field>
    <field name="keywords">DisableWindowDecoratorByName windowManager::DisableWindowDecoratorByName windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::DisableWindowDecoratorByIndex</field>
    <field name="args">(GLuint windowIndex, GLbitfield decorators)</field>
    <field name="url">dd/d30/classwindowManager.html#a99207f928c85eb227a2b39bb371c5841</field>
    <field name="keywords">DisableWindowDecoratorByIndex windowManager::DisableWindowDecoratorByIndex windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowOnKeyEventByName</field>
    <field name="args">(const char *windowName, onKeyEvent_t onKey)</field>
    <field name="url">dd/d30/classwindowManager.html#a87b6e676fc94774136d9380062cbb74d</field>
    <field name="keywords">SetWindowOnKeyEventByName windowManager::SetWindowOnKeyEventByName windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowOnKeyEventByIndex</field>
    <field name="args">(GLuint windowIndex, onKeyEvent_t onKey)</field>
    <field name="url">dd/d30/classwindowManager.html#a3c99d99200f922367bc480a12affe12a</field>
    <field name="keywords">SetWindowOnKeyEventByIndex windowManager::SetWindowOnKeyEventByIndex windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowOnMouseButtonEventByName</field>
    <field name="args">(const char *windowName, onMouseButtonEvent_t onMouseButton)</field>
    <field name="url">dd/d30/classwindowManager.html#a485e0239a4f42087d79cd54844373a3b</field>
    <field name="keywords">SetWindowOnMouseButtonEventByName windowManager::SetWindowOnMouseButtonEventByName windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowOnMouseButtonEventByIndex</field>
    <field name="args">(GLuint windowIndex, onMouseButtonEvent_t onMouseButton)</field>
    <field name="url">dd/d30/classwindowManager.html#a98c5631f3f56f713f16055df0012b29f</field>
    <field name="keywords">SetWindowOnMouseButtonEventByIndex windowManager::SetWindowOnMouseButtonEventByIndex windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowOnMouseWheelEventByName</field>
    <field name="args">(const char *windowName, onMouseWheelEvent_t onMouseWheel)</field>
    <field name="url">dd/d30/classwindowManager.html#aad0870c1f6d365668b61acebe726d039</field>
    <field name="keywords">SetWindowOnMouseWheelEventByName windowManager::SetWindowOnMouseWheelEventByName windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowOnMouseWheelEventByIndex</field>
    <field name="args">(GLuint windowIndex, onMouseWheelEvent_t onMouseWheel)</field>
    <field name="url">dd/d30/classwindowManager.html#a2170448120244696ed47c6a2ca5a5c7e</field>
    <field name="keywords">SetWindowOnMouseWheelEventByIndex windowManager::SetWindowOnMouseWheelEventByIndex windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowOnDestroyedByName</field>
    <field name="args">(const char *windowName, onDestroyedEvent_t onDestroyed)</field>
    <field name="url">dd/d30/classwindowManager.html#a626c299fda93f3afb3ccda81a21c2c76</field>
    <field name="keywords">SetWindowOnDestroyedByName windowManager::SetWindowOnDestroyedByName windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowOnDestroyedByIndex</field>
    <field name="args">(GLuint windowIndex, onDestroyedEvent_t onDestroyed)</field>
    <field name="url">dd/d30/classwindowManager.html#a026db446ab597ee58bfb0f79e431f1ab</field>
    <field name="keywords">SetWindowOnDestroyedByIndex windowManager::SetWindowOnDestroyedByIndex windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowOnMaximizedByName</field>
    <field name="args">(const char *windowName, onMaximizedEvent_t onMaximized)</field>
    <field name="url">dd/d30/classwindowManager.html#a5cf61889b137d0c42bcd60c672717af3</field>
    <field name="keywords">SetWindowOnMaximizedByName windowManager::SetWindowOnMaximizedByName windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowOnMaximizedByIndex</field>
    <field name="args">(GLuint windowIndex, onMaximizedEvent_t onMaximized)</field>
    <field name="url">dd/d30/classwindowManager.html#a9b565c8092a523715475016af865df94</field>
    <field name="keywords">SetWindowOnMaximizedByIndex windowManager::SetWindowOnMaximizedByIndex windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowOnMinimizedByName</field>
    <field name="args">(const char *windowName, onMinimizedEvent_t onMinimized)</field>
    <field name="url">dd/d30/classwindowManager.html#a0efbc402242abb7fd2628b5c39aa8d5e</field>
    <field name="keywords">SetWindowOnMinimizedByName windowManager::SetWindowOnMinimizedByName windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowOnMinimizedByIndex</field>
    <field name="args">(GLuint windowIndex, onMinimizedEvent_t onMinimized)</field>
    <field name="url">dd/d30/classwindowManager.html#aaa709a4fbcb839c8bc57ba02f894c188</field>
    <field name="keywords">SetWindowOnMinimizedByIndex windowManager::SetWindowOnMinimizedByIndex windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowOnFocusByName</field>
    <field name="args">(const char *windowName, onFocusEvent_t onFocus)</field>
    <field name="url">dd/d30/classwindowManager.html#a843a8c3f1ca44f16b0d7e1e0bafbd39e</field>
    <field name="keywords">SetWindowOnFocusByName windowManager::SetWindowOnFocusByName windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowOnFocusByIndex</field>
    <field name="args">(GLuint windowIndex, onFocusEvent_t onFocus)</field>
    <field name="url">dd/d30/classwindowManager.html#a305846eb49433993c06ce8a83d796745</field>
    <field name="keywords">SetWindowOnFocusByIndex windowManager::SetWindowOnFocusByIndex windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowOnMovedByName</field>
    <field name="args">(const char *windowName, onMovedEvent_t onMoved)</field>
    <field name="url">dd/d30/classwindowManager.html#ad84e431adb19ad9f6691bc747abf43b3</field>
    <field name="keywords">SetWindowOnMovedByName windowManager::SetWindowOnMovedByName windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowOnMovedByIndex</field>
    <field name="args">(GLuint windowIndex, onMovedEvent_t onMoved)</field>
    <field name="url">dd/d30/classwindowManager.html#ae20bfe4ab603f2feb1f1279946d1b343</field>
    <field name="keywords">SetWindowOnMovedByIndex windowManager::SetWindowOnMovedByIndex windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowOnResizeByName</field>
    <field name="args">(const char *windowName, onResizeEvent_t onResize)</field>
    <field name="url">dd/d30/classwindowManager.html#a129e3f5d32d8e74868de5c56b9c98af4</field>
    <field name="keywords">SetWindowOnResizeByName windowManager::SetWindowOnResizeByName windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowOnResizeByIndex</field>
    <field name="args">(GLuint windowIndex, onResizeEvent_t onResize)</field>
    <field name="url">dd/d30/classwindowManager.html#ab090fd5e8695f442343faf4a1d42d6ba</field>
    <field name="keywords">SetWindowOnResizeByIndex windowManager::SetWindowOnResizeByIndex windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowOnMouseMoveByName</field>
    <field name="args">(const char *windowName, onMouseMoveEvent_t onMouseMove)</field>
    <field name="url">dd/d30/classwindowManager.html#aeecfe1feae78216e0ecaeb67ea417402</field>
    <field name="keywords">SetWindowOnMouseMoveByName windowManager::SetWindowOnMouseMoveByName windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::SetWindowOnMouseMoveByIndex</field>
    <field name="args">(GLuint windowIndex, onMouseMoveEvent_t onMouseMove)</field>
    <field name="url">dd/d30/classwindowManager.html#abe8cb50f0fd9b43e20012e25150cf6f9</field>
    <field name="keywords">SetWindowOnMouseMoveByIndex windowManager::SetWindowOnMouseMoveByIndex windowManager</field>
    <field name="text">if the window is being used without being initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowInList</field>
    <field name="args">(const char *windowName)</field>
    <field name="url">dd/d30/classwindowManager.html#ab5138116bf6be834bfc29c96b5dfb05e</field>
    <field name="keywords">GetWindowInList windowManager::GetWindowInList windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowInList</field>
    <field name="args">(GLuint windowIndex)</field>
    <field name="url">dd/d30/classwindowManager.html#a49266f2848119dab67b45e644a0dafc6</field>
    <field name="keywords">GetWindowInList windowManager::GetWindowInList windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::IsValid</field>
    <field name="args">(const char *stringParameter)</field>
    <field name="url">dd/d30/classwindowManager.html#a985023856316e82084aece1048c0ed7d</field>
    <field name="keywords">IsValid windowManager::IsValid windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::IsValid</field>
    <field name="args">(onKeyEvent_t onKeyPressed)</field>
    <field name="url">dd/d30/classwindowManager.html#a3808551d60313981dbaa9a5ddf551c91</field>
    <field name="keywords">IsValid windowManager::IsValid windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::IsValid</field>
    <field name="args">(onMouseWheelEvent_t onMouseWheelEvent)</field>
    <field name="url">dd/d30/classwindowManager.html#ab3514d0daed584b084e537e566b557e3</field>
    <field name="keywords">IsValid windowManager::IsValid windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::IsValid</field>
    <field name="args">(onMaximizedEvent_t onMaximized)</field>
    <field name="url">dd/d30/classwindowManager.html#a30326cea2248593ae7a8ac7f8b2e591a</field>
    <field name="keywords">IsValid windowManager::IsValid windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::IsValid</field>
    <field name="args">(onFocusEvent_t onFocus)</field>
    <field name="url">dd/d30/classwindowManager.html#a3235838f910a2100c5b965632ee3ab0b</field>
    <field name="keywords">IsValid windowManager::IsValid windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::IsValid</field>
    <field name="args">(onMovedEvent_t onMoved)</field>
    <field name="url">dd/d30/classwindowManager.html#a528d06541ce79f48aaf8f9f62a42ffe9</field>
    <field name="keywords">IsValid windowManager::IsValid windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::IsValid</field>
    <field name="args">(onMouseMoveEvent_t onMouseMove)</field>
    <field name="url">dd/d30/classwindowManager.html#adcaec480badde018427a2a966940faea</field>
    <field name="keywords">IsValid windowManager::IsValid windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::WindowExists</field>
    <field name="args">(GLuint windowIndex)</field>
    <field name="url">dd/d30/classwindowManager.html#a2db7c47e82df2e2c0f162c91bd2adfa5</field>
    <field name="keywords">WindowExists windowManager::WindowExists windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetInstance</field>
    <field name="args">(void)</field>
    <field name="url">dd/d30/classwindowManager.html#a699663c4d3deeb5ae9ac2e556aedcb9e</field>
    <field name="keywords">GetInstance windowManager::GetInstance windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::InitializeWindow</field>
    <field name="args">(tWindow *window)</field>
    <field name="url">dd/d30/classwindowManager.html#aa793b6ed1c399a3ebe647393c67a100e</field>
    <field name="keywords">InitializeWindow windowManager::InitializeWindow windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::InitializeGL</field>
    <field name="args">(tWindow *window)</field>
    <field name="url">dd/d30/classwindowManager.html#a8ebfa87983a1dc778813a50cea6ea1c4</field>
    <field name="keywords">InitializeGL windowManager::InitializeGL windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::ShutdownWindow</field>
    <field name="args">(tWindow *window)</field>
    <field name="url">dd/d30/classwindowManager.html#adbfc108b25e98ab21477632b26a7803e</field>
    <field name="keywords">ShutdownWindow windowManager::ShutdownWindow windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::DoesExistByName</field>
    <field name="args">(const char *windowName)</field>
    <field name="url">dd/d30/classwindowManager.html#a712a1b6fd634670a74839a7f1ef5928a</field>
    <field name="keywords">DoesExistByName windowManager::DoesExistByName windowManager</field>
    <field name="text">if an invalid window name was given</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::DoesExistByIndex</field>
    <field name="args">(GLuint windowIndex)</field>
    <field name="url">dd/d30/classwindowManager.html#a7807aac5eca494f94ae801f0a0709a9e</field>
    <field name="keywords">DoesExistByIndex windowManager::DoesExistByIndex windowManager</field>
    <field name="text">if an invalid window index was given</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowByName</field>
    <field name="args">(const char *windowName)</field>
    <field name="url">dd/d30/classwindowManager.html#a90efc6c1cf1969c1bd57fc4be8113022</field>
    <field name="keywords">GetWindowByName windowManager::GetWindowByName windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowByIndex</field>
    <field name="args">(GLuint windowIndex)</field>
    <field name="url">dd/d30/classwindowManager.html#a7c28b5ed858debf780d3926f17f09e7b</field>
    <field name="keywords">GetWindowByIndex windowManager::GetWindowByIndex windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowByHandle</field>
    <field name="args">(Window windowHandle)</field>
    <field name="url">dd/d30/classwindowManager.html#ae9ed777df2021aef0d512510cf683570</field>
    <field name="keywords">GetWindowByHandle windowManager::GetWindowByHandle windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetWindowByEvent</field>
    <field name="args">(XEvent currentEvent)</field>
    <field name="url">dd/d30/classwindowManager.html#a0e2a4e20518936787a63de7a6a2acbc0</field>
    <field name="keywords">GetWindowByEvent windowManager::GetWindowByEvent windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_Initialize</field>
    <field name="args">(void)</field>
    <field name="url">dd/d30/classwindowManager.html#a1270a80d59d026f218a191a6aa93ccd4</field>
    <field name="keywords">Linux_Initialize windowManager::Linux_Initialize windowManager</field>
    <field name="text">Linux if cannot connect to X11 server</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::InitializeAtomics</field>
    <field name="args">(tWindow *window)</field>
    <field name="url">dd/d30/classwindowManager.html#aff03eed466a5ec0fb9f8708d660aa19c</field>
    <field name="keywords">InitializeAtomics windowManager::InitializeAtomics windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_InitializeWindow</field>
    <field name="args">(tWindow *window)</field>
    <field name="url">dd/d30/classwindowManager.html#a851f7b3faa2ff16b6f08fd32483a17f2</field>
    <field name="keywords">Linux_InitializeWindow windowManager::Linux_InitializeWindow windowManager</field>
    <field name="text">Linux if cannot connect to X11 server Linux if visual information given was invalid Linux when X11 fails to create a new window</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_InitializeGL</field>
    <field name="args">(tWindow *window)</field>
    <field name="url">dd/d30/classwindowManager.html#a2138ea0ee25079171d85572b9dd50782</field>
    <field name="keywords">Linux_InitializeGL windowManager::Linux_InitializeGL windowManager</field>
    <field name="text">if the window already has an OpenGL context</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_ShutdownWindow</field>
    <field name="args">(tWindow *window)</field>
    <field name="url">dd/d30/classwindowManager.html#a0c56cebe032b15aa7d51db3c0331c27b</field>
    <field name="keywords">Linux_ShutdownWindow windowManager::Linux_ShutdownWindow windowManager</field>
    <field name="text">the window is currently full screen</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_Shutdown</field>
    <field name="args">(void)</field>
    <field name="url">dd/d30/classwindowManager.html#a69cc391dd61174cea787d05969c5a070</field>
    <field name="keywords">Linux_Shutdown windowManager::Linux_Shutdown windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_Fullscreen</field>
    <field name="args">(tWindow *window)</field>
    <field name="url">dd/d30/classwindowManager.html#a07c106a5ff82e798e1621784a57794cb</field>
    <field name="keywords">Linux_Fullscreen windowManager::Linux_Fullscreen windowManager</field>
    <field name="text">the window is currently full screen</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_Minimize</field>
    <field name="args">(tWindow *window)</field>
    <field name="url">dd/d30/classwindowManager.html#a13906853600459bea873e7bbfb781e44</field>
    <field name="keywords">Linux_Minimize windowManager::Linux_Minimize windowManager</field>
    <field name="text">the window is currently minimized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_Maximize</field>
    <field name="args">(tWindow *window)</field>
    <field name="url">dd/d30/classwindowManager.html#a79bfe7223ce3d2c53859859fabe5cd2e</field>
    <field name="keywords">Linux_Maximize windowManager::Linux_Maximize windowManager</field>
    <field name="text">the window is currently maximized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_Restore</field>
    <field name="args">(tWindow *window)</field>
    <field name="url">dd/d30/classwindowManager.html#a4c7833888f0e5294277702af18929065</field>
    <field name="keywords">Linux_Restore windowManager::Linux_Restore windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_Focus</field>
    <field name="args">(tWindow *window, GLboolean newFocusState)</field>
    <field name="url">dd/d30/classwindowManager.html#a9c16b2e609824ac8220d8f19762a3379</field>
    <field name="keywords">Linux_Focus windowManager::Linux_Focus windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_SetMousePosition</field>
    <field name="args">(tWindow *window)</field>
    <field name="url">dd/d30/classwindowManager.html#a434464316f16755461b97ad7a9cd4e2b</field>
    <field name="keywords">Linux_SetMousePosition windowManager::Linux_SetMousePosition windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_SetWindowPosition</field>
    <field name="args">(tWindow *window)</field>
    <field name="url">dd/d30/classwindowManager.html#a667d696a3f7b801147128e9758403973</field>
    <field name="keywords">Linux_SetWindowPosition windowManager::Linux_SetWindowPosition windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_SetWindowResolution</field>
    <field name="args">(tWindow *window)</field>
    <field name="url">dd/d30/classwindowManager.html#ab6cca33de7e75501948d3de5bc96bdcf</field>
    <field name="keywords">Linux_SetWindowResolution windowManager::Linux_SetWindowResolution windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_ProcessEvents</field>
    <field name="args">(XEvent currentEvent)</field>
    <field name="url">dd/d30/classwindowManager.html#a99ceb76470dee3f805fb83060552691d</field>
    <field name="keywords">Linux_ProcessEvents windowManager::Linux_ProcessEvents windowManager</field>
    <field name="text">the key is currently up the key is currently up the key is currently up the key is currently up the key is currently up the key is currently down the key is currently down the key is currently down the key is currently down the key is currently down the left mouse button the mouse button is currently down the left mouse button the mouse button is currently down the middle mouse button ScrollWheel the mouse button is currently down the middle mouse button ScrollWheel the mouse button is currently down the right mouse button the mouse button is currently down the right mouse button the mouse button is currently down the mouse wheel down the mouse button is currently down the mouse wheel up the mouse wheel up the mouse button is currently down the mouse wheel up the left mouse button the mouse button is currently up the left mouse button the mouse button is currently up the middle mouse button ScrollWheel the mouse button is currently up the middle mouse button ScrollWheel the mouse button is currently up the right mouse button the mouse button is currently up the right mouse button the mouse button is currently up the mouse wheel down the mouse button is currently down the mouse wheel up the mouse button is currently down set the screen mouse position to match the event</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_PollForEvents</field>
    <field name="args">(void)</field>
    <field name="url">dd/d30/classwindowManager.html#ab100f0eee7720dc735317947221ca2c9</field>
    <field name="keywords">Linux_PollForEvents windowManager::Linux_PollForEvents windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_WaitForEvents</field>
    <field name="args">(void)</field>
    <field name="url">dd/d30/classwindowManager.html#a1b5165b2def70885aa8c4503dbf3104f</field>
    <field name="keywords">Linux_WaitForEvents windowManager::Linux_WaitForEvents windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_SetMousePositionInScreen</field>
    <field name="args">(GLuint x, GLuint y)</field>
    <field name="url">dd/d30/classwindowManager.html#a46f1787b18f04f9da509680686a12c61</field>
    <field name="keywords">Linux_SetMousePositionInScreen windowManager::Linux_SetMousePositionInScreen windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetDisplay</field>
    <field name="args">(void)</field>
    <field name="url">dd/d30/classwindowManager.html#a0a861576132c48892d042de95addec7e</field>
    <field name="keywords">GetDisplay windowManager::GetDisplay windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_GetEventType</field>
    <field name="args">(XEvent currentEvent)</field>
    <field name="url">dd/d30/classwindowManager.html#a03bf778603aa5b04cd65e247b35cd807</field>
    <field name="keywords">Linux_GetEventType windowManager::Linux_GetEventType windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_TranslateKey</field>
    <field name="args">(GLuint keySymbol)</field>
    <field name="url">dd/d30/classwindowManager.html#a0d5455de0d8aeb04494a34271bf0b003</field>
    <field name="keywords">Linux_TranslateKey windowManager::Linux_TranslateKey windowManager</field>
    <field name="text">the fist key that is not a char the Escape key the fist key that is not a char the Home key the fist key that is not a char the ArrowLeft key the fist key that is not a char the ArrowRight key the fist key that is not a char the ArrowUp key the fist key that is not a char the ArrowDown key the fist key that is not a char the PageUp key the fist key that is not a char the PageDown key the fist key that is not a char the End key the fist key that is not a char the PrintScreen key the fist key that is not a char the insert key the fist key that is not a char the NumLock key the fist key that is not a char the Keypad Multiply key the fist key that is not a char the Keypad Add key the fist key that is not a char the Keypad Subtract key the fist key that is not a char the Keypad Period/Decimal key the fist key that is not a char the KeyPad Divide key the fist key that is not a char the Keypad 0 key the fist key that is not a char the Keypad 1 key the fist key that is not a char the Keypad 2 key the fist key that is not a char the Keypad 3 key the fist key that is not a char the Keypad 4 key the fist key that is not a char the Keypad 5 key the fist key that is not a char the Keypad 6 key the fist key that is not a char the Keypad 7 key the fist key that is not a char the keypad 8 key the fist key that is not a char the Keypad 9 key the fist key that is not a char the F1 key the fist key that is not a char the F2 key the fist key that is not a char the F3 key the fist key that is not a char the F4 key the fist key that is not a char the F5 key the fist key that is not a char the F6 key the fist key that is not a char the F7 key the fist key that is not a char the F8 key the fist key that is not a char the F9 key the fist key that is not a char the F10 key the fist key that is not a char the F11 key the fist key that is not a char the F12 key the fist key that is not a char the left Shift key the fist key that is not a char the right Shift key the fist key that is not a char the right Control key the fist key that is not a char the left Control key the fist key that is not a char the CapsLock key the fist key that is not a char the left Alternate key the fist key that is not a char the right Alternate key</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_EnableDecorators</field>
    <field name="args">(tWindow *window, GLbitfield decorators)</field>
    <field name="url">dd/d30/classwindowManager.html#adef5e54b655c0422af75109ea91840f2</field>
    <field name="keywords">Linux_EnableDecorators windowManager::Linux_EnableDecorators windowManager</field>
    <field name="text">the close button decoration of the window the minimize button decoration of the window the maximize button decoration pf the window the icon decoration of the window The title bar decoration of the window the border decoration of the window the sizable border decoration of the window</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_DisableDecorators</field>
    <field name="args">(tWindow *window, GLbitfield decorators)</field>
    <field name="url">dd/d30/classwindowManager.html#afb7af00cdd2f51e352a404969b27a77e</field>
    <field name="keywords">Linux_DisableDecorators windowManager::Linux_DisableDecorators windowManager</field>
    <field name="text">the close button decoration of the window the maximize button decoration pf the window the minimize button decoration of the window the minimize button decoration of the window the maximize button decoration pf the window the minimize button decoration of the window the icon decoration of the window The title bar decoration of the window the border decoration of the window the sizable border decoration of the window</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_SetWindowStyle</field>
    <field name="args">(tWindow *window, GLuint windowStyle)</field>
    <field name="url">dd/d30/classwindowManager.html#a779e701763fcb8b809d70271737cdfcb</field>
    <field name="keywords">Linux_SetWindowStyle windowManager::Linux_SetWindowStyle windowManager</field>
    <field name="text">the default window style for the respective platform the window has no decorators but the window border and title bar the window has no decorators if the window style gives is invalid</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::Linux_SetWindowIcon</field>
    <field name="args">(tWindow *window, const char *icon, GLuint width, GLuint height)</field>
    <field name="url">dd/d30/classwindowManager.html#a9bae467484413cded1c7f89a590c5b2a</field>
    <field name="keywords">Linux_SetWindowIcon windowManager::Linux_SetWindowIcon windowManager</field>
    <field name="text">Linux when the function has not yet been implemented on the Linux in the current version of the API</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::GetBestFrameBufferConfig</field>
    <field name="args">(tWindow *givenWindow)</field>
    <field name="url">dd/d30/classwindowManager.html#a7db1f335821bf4670af05f9aba214244</field>
    <field name="keywords">GetBestFrameBufferConfig windowManager::GetBestFrameBufferConfig windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::windowList</field>
    <field name="url">dd/d30/classwindowManager.html#a921fa8ef93c0ee707f8af04b857f6fea</field>
    <field name="keywords">windowList windowManager::windowList windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::screenResolution</field>
    <field name="args">[2]</field>
    <field name="url">dd/d30/classwindowManager.html#ae2096bea388ece5099ebbcc821fd1533</field>
    <field name="keywords">screenResolution windowManager::screenResolution windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::screenMousePosition</field>
    <field name="args">[2]</field>
    <field name="url">dd/d30/classwindowManager.html#a7d7a88ec4c34a1ce5380cb9e157702b2</field>
    <field name="keywords">screenMousePosition windowManager::screenMousePosition windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::isInitialized</field>
    <field name="url">dd/d30/classwindowManager.html#a0d374ff695f81f6e29b805c305bbee63</field>
    <field name="keywords">isInitialized windowManager::isInitialized windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::currentDisplay</field>
    <field name="url">dd/d30/classwindowManager.html#af737d22cca1c1c5857a6d382bed9edd1</field>
    <field name="keywords">currentDisplay windowManager::currentDisplay windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::currentEvent</field>
    <field name="url">dd/d30/classwindowManager.html#a31f03bcd0d5787fe9176658e553b2031</field>
    <field name="keywords">currentEvent windowManager::currentEvent windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::instance</field>
    <field name="url">dd/d30/classwindowManager.html#a8cc8efc447e979bdd592714983893d1c</field>
    <field name="keywords">instance windowManager::instance windowManager</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">windowManager::tWindow</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html</field>
    <field name="keywords">tWindow</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">windowManager::tWindow::tWindow</field>
    <field name="args">()</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a69cff33cc954ef42f951b1a496bbf19b</field>
    <field name="keywords">tWindow windowManager::tWindow::tWindow windowManager::tWindow</field>
    <field name="text">the window is in its default state the default window style for the respective platform</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::name</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#aadaa0ee1a38b009423a2b58491294e27</field>
    <field name="keywords">name windowManager::tWindow::name windowManager::tWindow</field>
    <field name="text">Name of the window</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::iD</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#ae444f37c9b8bde23a7bb9c6fc3e0cdf8</field>
    <field name="keywords">iD windowManager::tWindow::iD windowManager::tWindow</field>
    <field name="text">ID of the Window where it belongs in the window manager</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::colourBits</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a934b65af01761a9f8549927bcd241850</field>
    <field name="keywords">colourBits windowManager::tWindow::colourBits windowManager::tWindow</field>
    <field name="text">color format of the window defaults to 32 bit color</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::depthBits</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a714a703c37ddfb8d5c5afc61098767b1</field>
    <field name="keywords">depthBits windowManager::tWindow::depthBits windowManager::tWindow</field>
    <field name="text">Size of the Depth buffer defaults to 8 bit depth</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::stencilBits</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#ae7a6cfd07a82fe42ce811f112fcf366a</field>
    <field name="keywords">stencilBits windowManager::tWindow::stencilBits windowManager::tWindow</field>
    <field name="text">Size of the stencil buffer defaults to 8 bit</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::keys</field>
    <field name="args">[256+1+54]</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#af57f677d4671500c11067c923a656825</field>
    <field name="keywords">keys windowManager::tWindow::keys windowManager::tWindow</field>
    <field name="text">Record of keys that are either pressed or released in the respective window</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::mouseButton</field>
    <field name="args">[2+1]</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#ab47f9d7b2125a4690fde41f446a9a6e7</field>
    <field name="keywords">mouseButton windowManager::tWindow::mouseButton windowManager::tWindow</field>
    <field name="text">Record of mouse buttons that are either presses or released</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::resolution</field>
    <field name="args">[2]</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#aa692e55391163b217707df48f8be4544</field>
    <field name="keywords">resolution windowManager::tWindow::resolution windowManager::tWindow</field>
    <field name="text">Resolution/Size of the window stored in an array</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::position</field>
    <field name="args">[2]</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a2b57c0faf039a7e18218012d04e4579d</field>
    <field name="keywords">position windowManager::tWindow::position windowManager::tWindow</field>
    <field name="text">Position of the Window relative to the screen co-ordinates</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::mousePosition</field>
    <field name="args">[2]</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a80240b4ec570e30f30671cf4f47f4634</field>
    <field name="keywords">mousePosition windowManager::tWindow::mousePosition windowManager::tWindow</field>
    <field name="text">Position of the Mouse cursor relative to the window co-ordinates</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::shouldClose</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#aafaa849d851536795e02ba0657dd8fb8</field>
    <field name="keywords">shouldClose windowManager::tWindow::shouldClose windowManager::tWindow</field>
    <field name="text">Whether the Window should be closing</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::inFocus</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a68e9d4db7d62cd26e5b48021d28a99a3</field>
    <field name="keywords">inFocus windowManager::tWindow::inFocus windowManager::tWindow</field>
    <field name="text">Whether the Window is currently in focus( if it is the current window be used )</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::initialized</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#adadb75a6bb38f4e4f5738504b92d8959</field>
    <field name="keywords">initialized windowManager::tWindow::initialized windowManager::tWindow</field>
    <field name="text">whether the window has been successfully initialized</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::contextCreated</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a94957b42c49dcdbcfe26dd514dfb2893</field>
    <field name="keywords">contextCreated windowManager::tWindow::contextCreated windowManager::tWindow</field>
    <field name="text">whether the OpenGL context has been successfully created</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::isCurrentContext</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a8f34df4256c9f061e028f076a1b3c921</field>
    <field name="keywords">isCurrentContext windowManager::tWindow::isCurrentContext windowManager::tWindow</field>
    <field name="text">whether the window is the current window being drawn to</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::currentState</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a751fc4005f0b965f757eb5cb5cdbf471</field>
    <field name="keywords">currentState windowManager::tWindow::currentState windowManager::tWindow</field>
    <field name="text">The current state of the window these states include Normal Minimized Maximized and Full screen</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::currentWindowStyle</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a2b877d4d7b81ad2c2c3b5edc50085c26</field>
    <field name="keywords">currentWindowStyle windowManager::tWindow::currentWindowStyle windowManager::tWindow</field>
    <field name="text">the current style of the window</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::keyEvent</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a5c7d9cb7fe6f6cb015067b6cd9fddaf9</field>
    <field name="keywords">keyEvent windowManager::tWindow::keyEvent windowManager::tWindow</field>
    <field name="text">this is the callback to be used when a key has been pressed</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::mouseButtonEvent</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#ae308af5d0ce3857726c474221d856441</field>
    <field name="keywords">mouseButtonEvent windowManager::tWindow::mouseButtonEvent windowManager::tWindow</field>
    <field name="text">this is the callback to be used when a mouse button has been pressed</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::mouseWheelEvent</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a041b00ab30d5759397bdd2943dbec79c</field>
    <field name="keywords">mouseWheelEvent windowManager::tWindow::mouseWheelEvent windowManager::tWindow</field>
    <field name="text">this is the callback to be used when the mouse wheel has been scrolled</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::destroyedEvent</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a2e208cafb0d42f3397e6bae4ab7c7113</field>
    <field name="keywords">destroyedEvent windowManager::tWindow::destroyedEvent windowManager::tWindow</field>
    <field name="text">this is the callback to be used when the window has been closed in a non-programmatic fashion</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::maximizedEvent</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#ad4b21b83e257e391c6dbc76b5deabc47</field>
    <field name="keywords">maximizedEvent windowManager::tWindow::maximizedEvent windowManager::tWindow</field>
    <field name="text">this is the callback to be used when the window has been maximized in a non-programmatic fashion</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::minimizedEvent</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a1130eb80f74e9da53a52fa3e0b19efce</field>
    <field name="keywords">minimizedEvent windowManager::tWindow::minimizedEvent windowManager::tWindow</field>
    <field name="text">this is the callback to be used when the window has been minimized in a non-programmatic fashion</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::focusEvent</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a72f897e39450ab0e2add7c1ea346a488</field>
    <field name="keywords">focusEvent windowManager::tWindow::focusEvent windowManager::tWindow</field>
    <field name="text">this is the callback to be used when the window has been given focus in a non-programmatic fashion</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::movedEvent</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#ab875720a8a32a14c2dd5c803b030dda9</field>
    <field name="keywords">movedEvent windowManager::tWindow::movedEvent windowManager::tWindow</field>
    <field name="text">this is the callback to be used the window has been moved in a non-programmatic fashion</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::resizeEvent</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#ad8b6d0be5bb4d0b7fa2ceae672061b0c</field>
    <field name="keywords">resizeEvent windowManager::tWindow::resizeEvent windowManager::tWindow</field>
    <field name="text">this is a callback to be used when the window has been resized in a non-programmatic fashion</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::mouseMoveEvent</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#acc64581725387cb3f291e87cfdf3e9bd</field>
    <field name="keywords">mouseMoveEvent windowManager::tWindow::mouseMoveEvent windowManager::tWindow</field>
    <field name="text">this is a callback to be used when the mouse has been moved</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::windowHandle</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a1666364f23f411235c34e988466cffc1</field>
    <field name="keywords">windowHandle windowManager::tWindow::windowHandle windowManager::tWindow</field>
    <field name="text">the X11 handle to the window I wish they didn t name the type Window</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::context</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#ac1555dad5be677117968a983ea9dcaeb</field>
    <field name="keywords">context windowManager::tWindow::context windowManager::tWindow</field>
    <field name="text">the handle to the GLX rendering context</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::visualInfo</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a86d46c5e7aece25c8c1290427c56af3e</field>
    <field name="keywords">visualInfo windowManager::tWindow::visualInfo windowManager::tWindow</field>
    <field name="text">the handle to the Visual Information similar purpose to PixelformatDesriptor</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::attributes</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#ac627aef8ef8f4dad32389b699f813cb9</field>
    <field name="keywords">attributes windowManager::tWindow::attributes windowManager::tWindow</field>
    <field name="text">attributes of the window RGB depth stencil etc</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::setAttributes</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a81084e7f7e0ae54a41acc872db80ed16</field>
    <field name="keywords">setAttributes windowManager::tWindow::setAttributes windowManager::tWindow</field>
    <field name="text">the attributes to be set for the window</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::decorators</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#ab25f158e1de82eec95c79c8dc3f069cb</field>
    <field name="keywords">decorators windowManager::tWindow::decorators windowManager::tWindow</field>
    <field name="text">enabled window decorators</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomState</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a92b6ba416e1126ad51fe14b5d5464f58</field>
    <field name="keywords">AtomState windowManager::tWindow::AtomState windowManager::tWindow</field>
    <field name="text">atom for the state of the window</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomHidden</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a65c478a7ba2f2a35ad6974a45e21125d</field>
    <field name="keywords">AtomHidden windowManager::tWindow::AtomHidden windowManager::tWindow</field>
    <field name="text">atom for the current hidden state of the window</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomFullScreen</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a8838a4a934c9826fbc06a0abaf85ecc0</field>
    <field name="keywords">AtomFullScreen windowManager::tWindow::AtomFullScreen windowManager::tWindow</field>
    <field name="text">atom for the full screen state of the window</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomMaxHorz</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#ab92b3d971f536557706629e5bf12a551</field>
    <field name="keywords">AtomMaxHorz windowManager::tWindow::AtomMaxHorz windowManager::tWindow</field>
    <field name="text">atom for the maximized horizontally state of the window</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomMaxVert</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#aa3b99a01f82cf826663ae21259e2c03d</field>
    <field name="keywords">AtomMaxVert windowManager::tWindow::AtomMaxVert windowManager::tWindow</field>
    <field name="text">atom for the maximized vertically state of the window</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomClose</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a97c45656cdc1022089a6dd5658786d75</field>
    <field name="keywords">AtomClose windowManager::tWindow::AtomClose windowManager::tWindow</field>
    <field name="text">atom for closing the window</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomActive</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a83c995fdb5d948c5c6b861c94fe79202</field>
    <field name="keywords">AtomActive windowManager::tWindow::AtomActive windowManager::tWindow</field>
    <field name="text">atom for the active window</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomDemandsAttention</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a227b29bb95316e53b0962db7a320ad77</field>
    <field name="keywords">AtomDemandsAttention windowManager::tWindow::AtomDemandsAttention windowManager::tWindow</field>
    <field name="text">atom for when the window demands attention</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomFocused</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a0e4ec8c1354a1db5f13ef77a0be5510c</field>
    <field name="keywords">AtomFocused windowManager::tWindow::AtomFocused windowManager::tWindow</field>
    <field name="text">atom for the focused state of the window</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomCardinal</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a6834592c2fea84dcdf4890eb6fe23a5d</field>
    <field name="keywords">AtomCardinal windowManager::tWindow::AtomCardinal windowManager::tWindow</field>
    <field name="text">atom for cardinal coordinates</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomIcon</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a930bb60a394c3669137bd1ce1aef8d2e</field>
    <field name="keywords">AtomIcon windowManager::tWindow::AtomIcon windowManager::tWindow</field>
    <field name="text">atom for the icon of the window</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomHints</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#af7264c964f39720f097799487d2d2f9f</field>
    <field name="keywords">AtomHints windowManager::tWindow::AtomHints windowManager::tWindow</field>
    <field name="text">atom for the window decorations</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomWindowType</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a6dd255806debd1c3f4a0b81e4fe2b354</field>
    <field name="keywords">AtomWindowType windowManager::tWindow::AtomWindowType windowManager::tWindow</field>
    <field name="text">atom for the type of window</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomWindowTypeDesktop</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a9389514b02098e9792e69dbb6dbfea7c</field>
    <field name="keywords">AtomWindowTypeDesktop windowManager::tWindow::AtomWindowTypeDesktop windowManager::tWindow</field>
    <field name="text">atom for the desktop window type</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomWindowTypeSplash</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#adf761867b712bb42b43167a0a7a50226</field>
    <field name="keywords">AtomWindowTypeSplash windowManager::tWindow::AtomWindowTypeSplash windowManager::tWindow</field>
    <field name="text">atom for the splash screen window type</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomWindowTypeNormal</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#adc84178508da3d23fb30988236680401</field>
    <field name="keywords">AtomWindowTypeNormal windowManager::tWindow::AtomWindowTypeNormal windowManager::tWindow</field>
    <field name="text">atom for the normal splash screen window type</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomAllowedActions</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#ab37642fb95f9aed2e809c6fd312e878c</field>
    <field name="keywords">AtomAllowedActions windowManager::tWindow::AtomAllowedActions windowManager::tWindow</field>
    <field name="text">atom for allowed window actions</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomActionResize</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a8e8a608a7175ffcca3588a90687bacf0</field>
    <field name="keywords">AtomActionResize windowManager::tWindow::AtomActionResize windowManager::tWindow</field>
    <field name="text">atom for allowing the window to be resized</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomActionMinimize</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#aec22346ed67ba676365bdb59f3ea7df2</field>
    <field name="keywords">AtomActionMinimize windowManager::tWindow::AtomActionMinimize windowManager::tWindow</field>
    <field name="text">atom for allowing the window to be minimized</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomActionShade</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a083f1b9c7f12ff5b3eed9da571ac3129</field>
    <field name="keywords">AtomActionShade windowManager::tWindow::AtomActionShade windowManager::tWindow</field>
    <field name="text">atom for allowing the window to be shaded</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomActionMaximizeHorz</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a8763a6d928852c0005815ed293fef645</field>
    <field name="keywords">AtomActionMaximizeHorz windowManager::tWindow::AtomActionMaximizeHorz windowManager::tWindow</field>
    <field name="text">atom for allowing the window to be maximized horizontally</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomActionMaximizeVert</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a71a1f7b4624aadf1be3c6e205802c509</field>
    <field name="keywords">AtomActionMaximizeVert windowManager::tWindow::AtomActionMaximizeVert windowManager::tWindow</field>
    <field name="text">atom for allowing the window to be maximized vertically</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomActionClose</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#a58c69d8d4a2bbb1500afd75526eb9493</field>
    <field name="keywords">AtomActionClose windowManager::tWindow::AtomActionClose windowManager::tWindow</field>
    <field name="text">atom for allowing the window to be closed</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">windowManager::tWindow::AtomDesktopGeometry</field>
    <field name="url">d9/d8a/structwindowManager_1_1tWindow.html#afcb20c952bf03ebffc7e710ea2cfb00d</field>
    <field name="keywords">AtomDesktopGeometry windowManager::tWindow::AtomDesktopGeometry windowManager::tWindow</field>
    <field name="text">atom for Desktop Geometry</field>
  </doc>
</add>
